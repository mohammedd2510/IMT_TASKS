
IR_LEDAnimation_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001914  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001aa8  08001aa8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001aa8  08001aa8  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa8  08001aa8  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa8  08001aa8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aac  08001aac  00011aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08001ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000044  08001af4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001af4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002601  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d42  00000000  00000000  000226b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  00023400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b97  00000000  00000000  000237f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000259a  00000000  00000000  00024387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006df4  00000000  00000000  00026921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000002ac  00000000  00000000  0002d715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d7c  00000000  00000000  0002d9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0002e740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000044 	.word	0x20000044
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001a90 	.word	0x08001a90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000048 	.word	0x20000048
 80001d0:	08001a90 	.word	0x08001a90

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <IR_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void IR_voidInit (IR_Config_t *Copy_IR_Config , pCallBackNotification IR_CallbackNotification)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	MEXTI_CONFIG_t IR_EXTI_Config;
	IR_EXTI_Config.MEXTI_Mode = MEXTI_INTERRUPT_MODE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
	IR_EXTI_Config.MEXTI_SenseSignal = Copy_IR_Config->IR_Trigger_Mode;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	789b      	ldrb	r3, [r3, #2]
 80007f2:	73bb      	strb	r3, [r7, #14]
	IR_EXTI_Config.MEXTI_Line = Copy_IR_Config->IR_Pin;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	737b      	strb	r3, [r7, #13]
    IR_EXTI_Config.MEXTI_Port = Copy_IR_Config->IR_Port;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	733b      	strb	r3, [r7, #12]
	MEXTI_voidInit(&IR_EXTI_Config,IR_EXTI_Handler);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	491a      	ldr	r1, [pc, #104]	; (8000870 <IR_voidInit+0x90>)
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb1a 	bl	8000e40 <MEXTI_voidInit>
	switch (Copy_IR_Config->IR_Port)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d010      	beq.n	8000836 <IR_voidInit+0x56>
 8000814:	2b02      	cmp	r3, #2
 8000816:	dc13      	bgt.n	8000840 <IR_voidInit+0x60>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <IR_voidInit+0x42>
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <IR_voidInit+0x4c>
	      break;
	    case GPIO_PORTC:
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
	      break;
	    default:
	      break;
 8000820:	e00e      	b.n	8000840 <IR_voidInit+0x60>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000822:	2100      	movs	r1, #0
 8000824:	2000      	movs	r0, #0
 8000826:	f000 ffbb 	bl	80017a0 <RCC_voidEnablePeripheralClock>
	      break;
 800082a:	e00a      	b.n	8000842 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 800082c:	2101      	movs	r1, #1
 800082e:	2000      	movs	r0, #0
 8000830:	f000 ffb6 	bl	80017a0 <RCC_voidEnablePeripheralClock>
	      break;
 8000834:	e005      	b.n	8000842 <IR_voidInit+0x62>
	      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000836:	2102      	movs	r1, #2
 8000838:	2000      	movs	r0, #0
 800083a:	f000 ffb1 	bl	80017a0 <RCC_voidEnablePeripheralClock>
	      break;
 800083e:	e000      	b.n	8000842 <IR_voidInit+0x62>
	      break;
 8000840:	bf00      	nop
	  }
	  GPIO_voidSetPinMode(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_MODE);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7818      	ldrb	r0, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	f000 fd49 	bl	80012e4 <GPIO_voidSetPinMode>
	  GPIO_voidSetPinPullUpDownResistor(Copy_IR_Config->IR_Port,Copy_IR_Config->IR_Pin,GPIO_INPUT_PIN_FLOAT);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7818      	ldrb	r0, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	785b      	ldrb	r3, [r3, #1]
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	f000 fea7 	bl	80015b0 <GPIO_voidSetPinPullUpDownResistor>
	  IR_callback = IR_CallbackNotification;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <IR_voidInit+0x94>)
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08000891 	.word	0x08000891
 8000874:	20000060 	.word	0x20000060

08000878 <IR_u32GetReceivedData>:
	}
	return Local_IR_ReceivedFlag;
}

u32  IR_u32GetReceivedData(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	return IR_ReceivedData;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <IR_u32GetReceivedData+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000064 	.word	0x20000064

08000890 <IR_EXTI_Handler>:

static void IR_EXTI_Handler()
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	static u8 IR_Status_Flag = IR_START_SIGNAL_STARTED;
	static s8 IR_BitCounter = IR_BIT_COUNT_INIT;
	u32 IR_ElapsedTime = ZERO_INIT;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
	if(IR_Status_Flag == IR_START_SIGNAL_STARTED)
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <IR_EXTI_Handler+0x114>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d107      	bne.n	80008b2 <IR_EXTI_Handler+0x22>
	{
		IR_Status_Flag = IR_START_SIGNAL_ENDED;
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <IR_EXTI_Handler+0x114>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	701a      	strb	r2, [r3, #0]
		MSystick_voidSetPreloadvalue(IR_START_SIGNAL_RANGE_HIGH);
 80008a8:	f643 2098 	movw	r0, #15000	; 0x3a98
 80008ac:	f001 f838 	bl	8001920 <MSystick_voidSetPreloadvalue>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
		}

	}

}
 80008b0:	e073      	b.n	800099a <IR_EXTI_Handler+0x10a>
	else if (IR_Status_Flag == IR_START_SIGNAL_ENDED)
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <IR_EXTI_Handler+0x114>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d112      	bne.n	80008e0 <IR_EXTI_Handler+0x50>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 80008ba:	f001 f80d 	bl	80018d8 <MSysTick_u32GetElapsedTime_us>
 80008be:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_START_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_START_SIGNAL_RANGE_HIGH)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f243 22c7 	movw	r2, #12999	; 0x32c7
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d907      	bls.n	80008da <IR_EXTI_Handler+0x4a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d802      	bhi.n	80008da <IR_EXTI_Handler+0x4a>
			IR_Status_Flag = IR_GETTING_DATA;
 80008d4:	4b33      	ldr	r3, [pc, #204]	; (80009a4 <IR_EXTI_Handler+0x114>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	701a      	strb	r2, [r3, #0]
		MSystick_voidResetTimer();
 80008da:	f001 f815 	bl	8001908 <MSystick_voidResetTimer>
}
 80008de:	e05c      	b.n	800099a <IR_EXTI_Handler+0x10a>
	else if (IR_Status_Flag == IR_GETTING_DATA)
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <IR_EXTI_Handler+0x114>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d143      	bne.n	8000970 <IR_EXTI_Handler+0xe0>
		IR_ElapsedTime = MSysTick_u32GetElapsedTime_us();
 80008e8:	f000 fff6 	bl	80018d8 <MSysTick_u32GetElapsedTime_us>
 80008ec:	6078      	str	r0, [r7, #4]
		if(IR_ElapsedTime >= IR_LOW_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_LOW_LEVEL_SIGNAL_RANGE_HIGH)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f4:	d312      	bcc.n	800091c <IR_EXTI_Handler+0x8c>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d80d      	bhi.n	800091c <IR_EXTI_Handler+0x8c>
			CLR_BIT(IR_ReceivedData,IR_BitCounter);
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <IR_EXTI_Handler+0x118>)
 8000902:	f993 3000 	ldrsb.w	r3, [r3]
 8000906:	461a      	mov	r2, r3
 8000908:	2301      	movs	r3, #1
 800090a:	4093      	lsls	r3, r2
 800090c:	43db      	mvns	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <IR_EXTI_Handler+0x11c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	4a25      	ldr	r2, [pc, #148]	; (80009ac <IR_EXTI_Handler+0x11c>)
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	e014      	b.n	8000946 <IR_EXTI_Handler+0xb6>
		else if (IR_ElapsedTime >= IR_HIGH_LEVEL_SIGNAL_RANGE_LOW && IR_ElapsedTime <= IR_HIGH_LEVEL_SIGNAL_RANGE_HIGH)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000922:	d310      	bcc.n	8000946 <IR_EXTI_Handler+0xb6>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800092a:	4293      	cmp	r3, r2
 800092c:	d80b      	bhi.n	8000946 <IR_EXTI_Handler+0xb6>
			SET_BIT(IR_ReceivedData,IR_BitCounter);
 800092e:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <IR_EXTI_Handler+0x118>)
 8000930:	f993 3000 	ldrsb.w	r3, [r3]
 8000934:	461a      	mov	r2, r3
 8000936:	2301      	movs	r3, #1
 8000938:	4093      	lsls	r3, r2
 800093a:	461a      	mov	r2, r3
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <IR_EXTI_Handler+0x11c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4313      	orrs	r3, r2
 8000942:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <IR_EXTI_Handler+0x11c>)
 8000944:	6013      	str	r3, [r2, #0]
		IR_BitCounter--;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <IR_EXTI_Handler+0x118>)
 8000948:	f993 3000 	ldrsb.w	r3, [r3]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3b01      	subs	r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b25a      	sxtb	r2, r3
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <IR_EXTI_Handler+0x118>)
 8000956:	701a      	strb	r2, [r3, #0]
		if(IR_BitCounter == IR_BIT_COUNT_END) IR_Status_Flag = IR_END_OF_FRAME_DETECTED;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <IR_EXTI_Handler+0x118>)
 800095a:	f993 3000 	ldrsb.w	r3, [r3]
 800095e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000962:	d102      	bne.n	800096a <IR_EXTI_Handler+0xda>
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <IR_EXTI_Handler+0x114>)
 8000966:	2205      	movs	r2, #5
 8000968:	701a      	strb	r2, [r3, #0]
		MSystick_voidResetTimer();
 800096a:	f000 ffcd 	bl	8001908 <MSystick_voidResetTimer>
}
 800096e:	e014      	b.n	800099a <IR_EXTI_Handler+0x10a>
	else if(IR_Status_Flag == IR_END_OF_FRAME_DETECTED)
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <IR_EXTI_Handler+0x114>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b05      	cmp	r3, #5
 8000976:	d110      	bne.n	800099a <IR_EXTI_Handler+0x10a>
		IR_BitCounter = IR_BIT_COUNT_INIT;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <IR_EXTI_Handler+0x118>)
 800097a:	221f      	movs	r2, #31
 800097c:	701a      	strb	r2, [r3, #0]
		IR_Status_Flag =  IR_START_SIGNAL_STARTED;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <IR_EXTI_Handler+0x114>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
		if(IR_callback != NULL){
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <IR_EXTI_Handler+0x120>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <IR_EXTI_Handler+0x104>
			IR_callback();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <IR_EXTI_Handler+0x120>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4798      	blx	r3
}
 8000992:	e002      	b.n	800099a <IR_EXTI_Handler+0x10a>
			IR_ReceivedFlag = IR_RECEIVED_DATA_STATUS;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <IR_EXTI_Handler+0x124>)
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000069 	.word	0x20000069
 80009a8:	20000003 	.word	0x20000003
 80009ac:	20000064 	.word	0x20000064
 80009b0:	20000060 	.word	0x20000060
 80009b4:	20000068 	.word	0x20000068

080009b8 <LED_voidInit>:
#include "../../../Inc/HAL/LED/LED_interface.h"
#include "../../../Inc/HAL/LED/LED_private.h"


// Software Interfaces Definitions
void LED_voidInit(Led_t* REF_LedObj) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  switch (REF_LedObj->led_port) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d010      	beq.n	80009ea <LED_voidInit+0x32>
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	dc13      	bgt.n	80009f4 <LED_voidInit+0x3c>
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <LED_voidInit+0x1e>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d005      	beq.n	80009e0 <LED_voidInit+0x28>
      break;
    case GPIO_PORTC:
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
      break;
    default:
      break;
 80009d4:	e00e      	b.n	80009f4 <LED_voidInit+0x3c>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 80009d6:	2100      	movs	r1, #0
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fee1 	bl	80017a0 <RCC_voidEnablePeripheralClock>
      break;
 80009de:	e00a      	b.n	80009f6 <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 80009e0:	2101      	movs	r1, #1
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 fedc 	bl	80017a0 <RCC_voidEnablePeripheralClock>
      break;
 80009e8:	e005      	b.n	80009f6 <LED_voidInit+0x3e>
      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 80009ea:	2102      	movs	r1, #2
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 fed7 	bl	80017a0 <RCC_voidEnablePeripheralClock>
      break;
 80009f2:	e000      	b.n	80009f6 <LED_voidInit+0x3e>
      break;
 80009f4:	bf00      	nop
  }
  GPIO_voidSetPinMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_MODE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7858      	ldrb	r0, [r3, #1]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2201      	movs	r2, #1
 8000a00:	4619      	mov	r1, r3
 8000a02:	f000 fc6f 	bl	80012e4 <GPIO_voidSetPinMode>
  GPIO_voidSetPinOutputMode(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7858      	ldrb	r0, [r3, #1]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4619      	mov	r1, r3
 8000a12:	f000 fcc1 	bl	8001398 <GPIO_voidSetPinOutputMode>
  GPIO_voidSetPinOutputSpeed(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7858      	ldrb	r0, [r3, #1]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	f000 fd0b 	bl	800143c <GPIO_voidSetPinOutputSpeed>
  GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,REF_LedObj->led_logic);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7858      	ldrb	r0, [r3, #1]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7819      	ldrb	r1, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	461a      	mov	r2, r3
 8000a34:	f000 fd5c 	bl	80014f0 <GPIO_voidSetPinValue>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <LED_voidOn>:
void LED_voidOn(Led_t* REF_LedObj) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_HIGH);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7858      	ldrb	r0, [r3, #1]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	f000 fd4c 	bl	80014f0 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_HIGH;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	709a      	strb	r2, [r3, #2]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <LED_voidOff>:
void LED_voidOff(Led_t* REF_LedObj) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
    GPIO_voidSetPinValue(REF_LedObj->led_port,REF_LedObj->led_pin,GPIO_LOW);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7858      	ldrb	r0, [r3, #1]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f000 fd39 	bl	80014f0 <GPIO_voidSetPinValue>
    REF_LedObj->led_logic = GPIO_LOW;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	709a      	strb	r2, [r3, #2]
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LedAnimation_8Leds_Init>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void LedAnimation_8Leds_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	u8 Local_LedsCounter =ZERO_INIT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]
	for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e009      	b.n	8000ab0 <LedAnimation_8Leds_Init+0x24>
	{
		LED_voidInit(Leds_objects_ptrs[Local_LedsCounter]);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <LedAnimation_8Leds_Init+0x34>)
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff87 	bl	80009b8 <LED_voidInit>
	for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	3301      	adds	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d9f2      	bls.n	8000a9c <LedAnimation_8Leds_Init+0x10>
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000024 	.word	0x20000024

08000ac4 <LedAnimation_Flashing>:
void LedAnimation_Flashing(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
	u8 Local_FlashingCounter=ZERO_INIT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	71fb      	strb	r3, [r7, #7]
	u8 Local_LedsCounter =ZERO_INIT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71bb      	strb	r3, [r7, #6]
	for(Local_FlashingCounter=ZERO_INIT;Local_FlashingCounter<4;Local_FlashingCounter++)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	e02a      	b.n	8000b2e <LedAnimation_Flashing+0x6a>
	{
		for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71bb      	strb	r3, [r7, #6]
 8000adc:	e009      	b.n	8000af2 <LedAnimation_Flashing+0x2e>
		{
			LED_voidOn(Leds_objects_ptrs[Local_LedsCounter]);
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <LedAnimation_Flashing+0x7c>)
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ffaa 	bl	8000a40 <LED_voidOn>
		for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	3301      	adds	r3, #1
 8000af0:	71bb      	strb	r3, [r7, #6]
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	d9f2      	bls.n	8000ade <LedAnimation_Flashing+0x1a>
		}
		MSystick_Delay_ms(400);
 8000af8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000afc:	f000 ff38 	bl	8001970 <MSystick_Delay_ms>
		for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	71bb      	strb	r3, [r7, #6]
 8000b04:	e009      	b.n	8000b1a <LedAnimation_Flashing+0x56>
		{
			LED_voidOff(Leds_objects_ptrs[Local_LedsCounter]);
 8000b06:	79bb      	ldrb	r3, [r7, #6]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <LedAnimation_Flashing+0x7c>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff ffa9 	bl	8000a66 <LED_voidOff>
		for(Local_LedsCounter=ZERO_INIT;Local_LedsCounter<LEDS_NUM;Local_LedsCounter++)
 8000b14:	79bb      	ldrb	r3, [r7, #6]
 8000b16:	3301      	adds	r3, #1
 8000b18:	71bb      	strb	r3, [r7, #6]
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	2b07      	cmp	r3, #7
 8000b1e:	d9f2      	bls.n	8000b06 <LedAnimation_Flashing+0x42>
		}
		MSystick_Delay_ms(400);
 8000b20:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000b24:	f000 ff24 	bl	8001970 <MSystick_Delay_ms>
	for(Local_FlashingCounter=ZERO_INIT;Local_FlashingCounter<4;Local_FlashingCounter++)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d9d1      	bls.n	8000ad8 <LedAnimation_Flashing+0x14>
	}
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000024 	.word	0x20000024

08000b44 <LedAnimation_Snake>:
void LedAnimation_Snake(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	u8 Local_LedsCounter1 =ZERO_INIT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	u8 Local_LedsCounter2 =ZERO_INIT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71bb      	strb	r3, [r7, #6]
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	71fb      	strb	r3, [r7, #7]
 8000b56:	e02c      	b.n	8000bb2 <LedAnimation_Snake+0x6e>
	{
		for(Local_LedsCounter2=ZERO_INIT;Local_LedsCounter2<LEDS_NUM-Local_LedsCounter1-1;Local_LedsCounter2++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71bb      	strb	r3, [r7, #6]
 8000b5c:	e016      	b.n	8000b8c <LedAnimation_Snake+0x48>
		{
			LED_voidOn(Leds_objects_ptrs[Local_LedsCounter2]);
 8000b5e:	79bb      	ldrb	r3, [r7, #6]
 8000b60:	4a22      	ldr	r2, [pc, #136]	; (8000bec <LedAnimation_Snake+0xa8>)
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff6a 	bl	8000a40 <LED_voidOn>
			MSystick_Delay_ms(200);
 8000b6c:	20c8      	movs	r0, #200	; 0xc8
 8000b6e:	f000 feff 	bl	8001970 <MSystick_Delay_ms>
			LED_voidOff(Leds_objects_ptrs[Local_LedsCounter2]);
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <LedAnimation_Snake+0xa8>)
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff73 	bl	8000a66 <LED_voidOff>
			MSystick_Delay_ms(50);
 8000b80:	2032      	movs	r0, #50	; 0x32
 8000b82:	f000 fef5 	bl	8001970 <MSystick_Delay_ms>
		for(Local_LedsCounter2=ZERO_INIT;Local_LedsCounter2<LEDS_NUM-Local_LedsCounter1-1;Local_LedsCounter2++)
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	71bb      	strb	r3, [r7, #6]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f1c3 0307 	rsb	r3, r3, #7
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbe2      	blt.n	8000b5e <LedAnimation_Snake+0x1a>
		}
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter2]);
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <LedAnimation_Snake+0xa8>)
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff4d 	bl	8000a40 <LED_voidOn>
			MSystick_Delay_ms(200);
 8000ba6:	20c8      	movs	r0, #200	; 0xc8
 8000ba8:	f000 fee2 	bl	8001970 <MSystick_Delay_ms>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d9cf      	bls.n	8000b58 <LedAnimation_Snake+0x14>
	}
	MSystick_Delay_ms(700);
 8000bb8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000bbc:	f000 fed8 	bl	8001970 <MSystick_Delay_ms>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	e009      	b.n	8000bda <LedAnimation_Snake+0x96>
	{
		LED_voidOff(Leds_objects_ptrs[Local_LedsCounter1]);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <LedAnimation_Snake+0xa8>)
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff49 	bl	8000a66 <LED_voidOff>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b07      	cmp	r3, #7
 8000bde:	d9f2      	bls.n	8000bc6 <LedAnimation_Snake+0x82>
	}
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000024 	.word	0x20000024

08000bf0 <LedAnimation_PingPong>:
void LedAnimation_PingPong(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
	s8 Local_LedsCounter1 =ZERO_INIT;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e020      	b.n	8000c42 <LedAnimation_PingPong+0x52>
	{
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter1]);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <LedAnimation_PingPong+0xb0>)
 8000c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff18 	bl	8000a40 <LED_voidOn>
		MSystick_Delay_ms(300);
 8000c10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c14:	f000 feac 	bl	8001970 <MSystick_Delay_ms>
		if(Local_LedsCounter1 != LED8){
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b07      	cmp	r3, #7
 8000c1e:	d007      	beq.n	8000c30 <LedAnimation_PingPong+0x40>
		LED_voidOff(Leds_objects_ptrs[Local_LedsCounter1]);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <LedAnimation_PingPong+0xb0>)
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff1b 	bl	8000a66 <LED_voidOff>
		}
		MSystick_Delay_ms(50);
 8000c30:	2032      	movs	r0, #50	; 0x32
 8000c32:	f000 fe9d 	bl	8001970 <MSystick_Delay_ms>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	ddda      	ble.n	8000c00 <LedAnimation_PingPong+0x10>
	}
	for(Local_LedsCounter1=LED8;Local_LedsCounter1>=0;Local_LedsCounter1--)
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	e01c      	b.n	8000c8a <LedAnimation_PingPong+0x9a>
	{
			LED_voidOn(Leds_objects_ptrs[Local_LedsCounter1]);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <LedAnimation_PingPong+0xb0>)
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fef0 	bl	8000a40 <LED_voidOn>
			MSystick_Delay_ms(300);
 8000c60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c64:	f000 fe84 	bl	8001970 <MSystick_Delay_ms>
			LED_voidOff(Leds_objects_ptrs[Local_LedsCounter1]);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <LedAnimation_PingPong+0xb0>)
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fef7 	bl	8000a66 <LED_voidOff>
			MSystick_Delay_ms(50);
 8000c78:	2032      	movs	r0, #50	; 0x32
 8000c7a:	f000 fe79 	bl	8001970 <MSystick_Delay_ms>
	for(Local_LedsCounter1=LED8;Local_LedsCounter1>=0;Local_LedsCounter1--)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3b01      	subs	r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	dade      	bge.n	8000c50 <LedAnimation_PingPong+0x60>
	}
	MSystick_Delay_ms(200);
 8000c92:	20c8      	movs	r0, #200	; 0xc8
 8000c94:	f000 fe6c 	bl	8001970 <MSystick_Delay_ms>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000024 	.word	0x20000024

08000ca4 <LedAnimation_Fat7yYaWarda>:
void LedAnimation_Fat7yYaWarda(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	s8 Local_LedsCounter1 =ZERO_INIT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
	s8 Local_LedsCounter2 =LED5;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	71bb      	strb	r3, [r7, #6]
	for(Local_LedsCounter1=LED4;Local_LedsCounter1>=0;Local_LedsCounter1--)
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e01f      	b.n	8000cf8 <LedAnimation_Fat7yYaWarda+0x54>
	{
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter1]);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <LedAnimation_Fat7yYaWarda+0x90>)
 8000cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff febc 	bl	8000a40 <LED_voidOn>
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter2]);
 8000cc8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <LedAnimation_Fat7yYaWarda+0x90>)
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff feb4 	bl	8000a40 <LED_voidOn>
		MSystick_Delay_ms(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f000 fe48 	bl	8001970 <MSystick_Delay_ms>
		Local_LedsCounter2++;
 8000ce0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	71bb      	strb	r3, [r7, #6]
	for(Local_LedsCounter1=LED4;Local_LedsCounter1>=0;Local_LedsCounter1--)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dadb      	bge.n	8000cb8 <LedAnimation_Fat7yYaWarda+0x14>
	}
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	e00d      	b.n	8000d22 <LedAnimation_Fat7yYaWarda+0x7e>
	{
		LED_voidOff(Leds_objects_ptrs[Local_LedsCounter1]);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <LedAnimation_Fat7yYaWarda+0x90>)
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fea8 	bl	8000a66 <LED_voidOff>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	dded      	ble.n	8000d06 <LedAnimation_Fat7yYaWarda+0x62>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000024 	.word	0x20000024

08000d38 <LedAnimation_2aflyYaWarda>:
void LedAnimation_2aflyYaWarda(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
	u8 Local_LedsCounter1 =ZERO_INIT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	71fb      	strb	r3, [r7, #7]
	u8 Local_LedsCounter2 =LED1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	71bb      	strb	r3, [r7, #6]
	for(Local_LedsCounter1=LED8;Local_LedsCounter1>=LED4;Local_LedsCounter1--)
 8000d46:	2307      	movs	r3, #7
 8000d48:	71fb      	strb	r3, [r7, #7]
 8000d4a:	e017      	b.n	8000d7c <LedAnimation_2aflyYaWarda+0x44>
	{
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter1]);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <LedAnimation_2aflyYaWarda+0x74>)
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe73 	bl	8000a40 <LED_voidOn>
		LED_voidOn(Leds_objects_ptrs[Local_LedsCounter2]);
 8000d5a:	79bb      	ldrb	r3, [r7, #6]
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <LedAnimation_2aflyYaWarda+0x74>)
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fe6c 	bl	8000a40 <LED_voidOn>
		MSystick_Delay_ms(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f000 fe00 	bl	8001970 <MSystick_Delay_ms>
		Local_LedsCounter2++;
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	3301      	adds	r3, #1
 8000d74:	71bb      	strb	r3, [r7, #6]
	for(Local_LedsCounter1=LED8;Local_LedsCounter1>=LED4;Local_LedsCounter1--)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d8e4      	bhi.n	8000d4c <LedAnimation_2aflyYaWarda+0x14>
	}
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
 8000d86:	e009      	b.n	8000d9c <LedAnimation_2aflyYaWarda+0x64>
	{
		LED_voidOff(Leds_objects_ptrs[Local_LedsCounter1]);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4a08      	ldr	r2, [pc, #32]	; (8000dac <LedAnimation_2aflyYaWarda+0x74>)
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fe68 	bl	8000a66 <LED_voidOff>
	for(Local_LedsCounter1=ZERO_INIT;Local_LedsCounter1<LEDS_NUM;Local_LedsCounter1++)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	2b07      	cmp	r3, #7
 8000da0:	d9f2      	bls.n	8000d88 <LedAnimation_2aflyYaWarda+0x50>
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000024 	.word	0x20000024

08000db0 <IR_Handler>:
 ******************************************************************************
 */
#include"main.h"

// ----------------------------------------------------------------------------
void IR_Handler(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if(IR_u32GetReceivedData() == IR_TV_REMOTE_1)
 8000db4:	f7ff fd60 	bl	8000878 <IR_u32GetReceivedData>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <IR_Handler+0x60>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d102      	bne.n	8000dc6 <IR_Handler+0x16>
	{
		LedAnimation_Flashing();
 8000dc0:	f7ff fe80 	bl	8000ac4 <LedAnimation_Flashing>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_5)
	{
		LedAnimation_2aflyYaWarda();
	}

}
 8000dc4:	e022      	b.n	8000e0c <IR_Handler+0x5c>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_2)
 8000dc6:	f7ff fd57 	bl	8000878 <IR_u32GetReceivedData>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <IR_Handler+0x64>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d102      	bne.n	8000dd8 <IR_Handler+0x28>
		LedAnimation_Snake();
 8000dd2:	f7ff feb7 	bl	8000b44 <LedAnimation_Snake>
}
 8000dd6:	e019      	b.n	8000e0c <IR_Handler+0x5c>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_3)
 8000dd8:	f7ff fd4e 	bl	8000878 <IR_u32GetReceivedData>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <IR_Handler+0x68>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <IR_Handler+0x3a>
		LedAnimation_PingPong();
 8000de4:	f7ff ff04 	bl	8000bf0 <LedAnimation_PingPong>
}
 8000de8:	e010      	b.n	8000e0c <IR_Handler+0x5c>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_4)
 8000dea:	f7ff fd45 	bl	8000878 <IR_u32GetReceivedData>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <IR_Handler+0x6c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d102      	bne.n	8000dfc <IR_Handler+0x4c>
		LedAnimation_Fat7yYaWarda();
 8000df6:	f7ff ff55 	bl	8000ca4 <LedAnimation_Fat7yYaWarda>
}
 8000dfa:	e007      	b.n	8000e0c <IR_Handler+0x5c>
	else if(IR_u32GetReceivedData() == IR_TV_REMOTE_5)
 8000dfc:	f7ff fd3c 	bl	8000878 <IR_u32GetReceivedData>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <IR_Handler+0x70>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <IR_Handler+0x5c>
		LedAnimation_2aflyYaWarda();
 8000e08:	f7ff ff96 	bl	8000d38 <LedAnimation_2aflyYaWarda>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	22d9d827 	.word	0x22d9d827
 8000e14:	22d9f00f 	.word	0x22d9f00f
 8000e18:	22d9c03f 	.word	0x22d9c03f
 8000e1c:	22d99867 	.word	0x22d99867
 8000e20:	22d98877 	.word	0x22d98877

08000e24 <main>:

int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	LedAnimation_8Leds_Init();
 8000e28:	f7ff fe30 	bl	8000a8c <LedAnimation_8Leds_Init>
	IR_voidInit(&IR_Config,IR_Handler);
 8000e2c:	4902      	ldr	r1, [pc, #8]	; (8000e38 <main+0x14>)
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <main+0x18>)
 8000e30:	f7ff fcd6 	bl	80007e0 <IR_voidInit>
    /* Loop forever */
	while(1)
 8000e34:	e7fe      	b.n	8000e34 <main+0x10>
 8000e36:	bf00      	nop
 8000e38:	08000db1 	.word	0x08000db1
 8000e3c:	20000000 	.word	0x20000000

08000e40 <MEXTI_voidInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MEXTI_voidInit(MEXTI_CONFIG_t* Copy_tEXTIConfig ,void (*pCallBackFunction)(void)){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]

	/*Enable EXTI Line mode interrupt or event*/
	switch(Copy_tEXTIConfig->MEXTI_Mode)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	78db      	ldrb	r3, [r3, #3]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <MEXTI_voidInit+0x18>
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d00c      	beq.n	8000e70 <MEXTI_voidInit+0x30>
			break;
		case MEXTI_EVENT_MODE:
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8000e56:	e017      	b.n	8000e88 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->IMR,Copy_tEXTIConfig->MEXTI_Line);
 8000e58:	4b7a      	ldr	r3, [pc, #488]	; (8001044 <MEXTI_voidInit+0x204>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	7852      	ldrb	r2, [r2, #1]
 8000e60:	4611      	mov	r1, r2
 8000e62:	2201      	movs	r2, #1
 8000e64:	408a      	lsls	r2, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a76      	ldr	r2, [pc, #472]	; (8001044 <MEXTI_voidInit+0x204>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
			break;
 8000e6e:	e00b      	b.n	8000e88 <MEXTI_voidInit+0x48>
			SET_BIT(EXTI->EMR,Copy_tEXTIConfig->MEXTI_Line);
 8000e70:	4b74      	ldr	r3, [pc, #464]	; (8001044 <MEXTI_voidInit+0x204>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	7852      	ldrb	r2, [r2, #1]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	408a      	lsls	r2, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4a70      	ldr	r2, [pc, #448]	; (8001044 <MEXTI_voidInit+0x204>)
 8000e82:	430b      	orrs	r3, r1
 8000e84:	6053      	str	r3, [r2, #4]
			break;
 8000e86:	bf00      	nop
	}

	/*Set Notification function*/
	EXTI_pNotificationFunction[Copy_tEXTIConfig->MEXTI_Line] = pCallBackFunction;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	785b      	ldrb	r3, [r3, #1]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <MEXTI_voidInit+0x208>)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*Set Sense Signal mode RISING, FALLING, ONCHANGE */
	switch(Copy_tEXTIConfig->MEXTI_SenseSignal){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d036      	beq.n	8000f0c <MEXTI_voidInit+0xcc>
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	dc4b      	bgt.n	8000f3a <MEXTI_voidInit+0xfa>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <MEXTI_voidInit+0x6c>
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d018      	beq.n	8000edc <MEXTI_voidInit+0x9c>
		case MEXTI_ONCHANGE:
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
			break;
		default:
			break;
 8000eaa:	e046      	b.n	8000f3a <MEXTI_voidInit+0xfa>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000eac:	4b65      	ldr	r3, [pc, #404]	; (8001044 <MEXTI_voidInit+0x204>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	7852      	ldrb	r2, [r2, #1]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	408a      	lsls	r2, r1
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a61      	ldr	r2, [pc, #388]	; (8001044 <MEXTI_voidInit+0x204>)
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6093      	str	r3, [r2, #8]
			CLR_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000ec2:	4b60      	ldr	r3, [pc, #384]	; (8001044 <MEXTI_voidInit+0x204>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	7852      	ldrb	r2, [r2, #1]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	2201      	movs	r2, #1
 8000ece:	408a      	lsls	r2, r1
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4a5b      	ldr	r2, [pc, #364]	; (8001044 <MEXTI_voidInit+0x204>)
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	60d3      	str	r3, [r2, #12]
			break;
 8000eda:	e02f      	b.n	8000f3c <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <MEXTI_voidInit+0x204>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	7852      	ldrb	r2, [r2, #1]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	408a      	lsls	r2, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	4a55      	ldr	r2, [pc, #340]	; (8001044 <MEXTI_voidInit+0x204>)
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	60d3      	str	r3, [r2, #12]
			CLR_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <MEXTI_voidInit+0x204>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	7852      	ldrb	r2, [r2, #1]
 8000efa:	4611      	mov	r1, r2
 8000efc:	2201      	movs	r2, #1
 8000efe:	408a      	lsls	r2, r1
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	4611      	mov	r1, r2
 8000f04:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <MEXTI_voidInit+0x204>)
 8000f06:	400b      	ands	r3, r1
 8000f08:	6093      	str	r3, [r2, #8]
			break;
 8000f0a:	e017      	b.n	8000f3c <MEXTI_voidInit+0xfc>
			SET_BIT(EXTI->RTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <MEXTI_voidInit+0x204>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	7852      	ldrb	r2, [r2, #1]
 8000f14:	4611      	mov	r1, r2
 8000f16:	2201      	movs	r2, #1
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <MEXTI_voidInit+0x204>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6093      	str	r3, [r2, #8]
			SET_BIT(EXTI->FTSR,Copy_tEXTIConfig->MEXTI_Line);
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <MEXTI_voidInit+0x204>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	7852      	ldrb	r2, [r2, #1]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	408a      	lsls	r2, r1
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a44      	ldr	r2, [pc, #272]	; (8001044 <MEXTI_voidInit+0x204>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	60d3      	str	r3, [r2, #12]
			break;
 8000f38:	e000      	b.n	8000f3c <MEXTI_voidInit+0xfc>
			break;
 8000f3a:	bf00      	nop
	}
	/* Enable SYSCFG Peripheral Clock*/
	RCC_voidEnablePeripheralClock(RCC_APB2, RCC_APB2_SYSCFGEN);
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f000 fc2e 	bl	80017a0 <RCC_voidEnablePeripheralClock>
	/*Set EXTI Port PORTA, PORTB, PORTC*/
	if(Copy_tEXTIConfig->MEXTI_Line < 4 && Copy_tEXTIConfig->MEXTI_Line >= 0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d80e      	bhi.n	8000f6a <MEXTI_voidInit+0x12a>
	{
		SYSCFG_EXTICR1 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	; (800104c <MEXTI_voidInit+0x20c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	4611      	mov	r1, r2
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	7852      	ldrb	r2, [r2, #1]
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4611      	mov	r1, r2
 8000f62:	4a3a      	ldr	r2, [pc, #232]	; (800104c <MEXTI_voidInit+0x20c>)
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e043      	b.n	8000ff2 <MEXTI_voidInit+0x1b2>

	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 8 && Copy_tEXTIConfig->MEXTI_Line >= 4){
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	785b      	ldrb	r3, [r3, #1]
 8000f6e:	2b07      	cmp	r3, #7
 8000f70:	d812      	bhi.n	8000f98 <MEXTI_voidInit+0x158>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	785b      	ldrb	r3, [r3, #1]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d90e      	bls.n	8000f98 <MEXTI_voidInit+0x158>
		SYSCFG_EXTICR2 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <MEXTI_voidInit+0x210>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	7852      	ldrb	r2, [r2, #1]
 8000f88:	0092      	lsls	r2, r2, #2
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <MEXTI_voidInit+0x210>)
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e02c      	b.n	8000ff2 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 12 && Copy_tEXTIConfig->MEXTI_Line >= 8){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	2b0b      	cmp	r3, #11
 8000f9e:	d812      	bhi.n	8000fc6 <MEXTI_voidInit+0x186>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d90e      	bls.n	8000fc6 <MEXTI_voidInit+0x186>
		SYSCFG_EXTICR3 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <MEXTI_voidInit+0x214>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7812      	ldrb	r2, [r2, #0]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	7852      	ldrb	r2, [r2, #1]
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <MEXTI_voidInit+0x214>)
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e015      	b.n	8000ff2 <MEXTI_voidInit+0x1b2>
	}
	else if(Copy_tEXTIConfig->MEXTI_Line < 16 && Copy_tEXTIConfig->MEXTI_Line >= 12){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	785b      	ldrb	r3, [r3, #1]
 8000fca:	2b0f      	cmp	r3, #15
 8000fcc:	d811      	bhi.n	8000ff2 <MEXTI_voidInit+0x1b2>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	2b0b      	cmp	r3, #11
 8000fd4:	d90d      	bls.n	8000ff2 <MEXTI_voidInit+0x1b2>
		SYSCFG_EXTICR4 |= (Copy_tEXTIConfig->MEXTI_Port << (Copy_tEXTIConfig->MEXTI_Line*4));
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MEXTI_voidInit+0x218>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	7852      	ldrb	r2, [r2, #1]
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	4611      	mov	r1, r2
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <MEXTI_voidInit+0x218>)
 8000fee:	430b      	orrs	r3, r1
 8000ff0:	6013      	str	r3, [r2, #0]
	}

	/*Enable NVIC Mask for EXTI Line*/
	if(Copy_tEXTIConfig->MEXTI_Line <5){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d808      	bhi.n	800100c <MEXTI_voidInit+0x1cc>
		MNVIC_voidEnableIRQ(EXTI0_IRQn+Copy_tEXTIConfig->MEXTI_Line);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	3306      	adds	r3, #6
 8001000:	b2db      	uxtb	r3, r3
 8001002:	b25b      	sxtb	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fb33 	bl	8001670 <MNVIC_voidEnableIRQ>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
	}
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
	}
}
 800100a:	e016      	b.n	800103a <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 5 && Copy_tEXTIConfig->MEXTI_Line <= 9){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	2b04      	cmp	r3, #4
 8001012:	d907      	bls.n	8001024 <MEXTI_voidInit+0x1e4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d803      	bhi.n	8001024 <MEXTI_voidInit+0x1e4>
		MNVIC_voidEnableIRQ(EXTI9_5_IRQn);
 800101c:	2017      	movs	r0, #23
 800101e:	f000 fb27 	bl	8001670 <MNVIC_voidEnableIRQ>
}
 8001022:	e00a      	b.n	800103a <MEXTI_voidInit+0x1fa>
	else if(Copy_tEXTIConfig->MEXTI_Line >= 10 && Copy_tEXTIConfig->MEXTI_Line <= 15){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	2b09      	cmp	r3, #9
 800102a:	d906      	bls.n	800103a <MEXTI_voidInit+0x1fa>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d802      	bhi.n	800103a <MEXTI_voidInit+0x1fa>
		MNVIC_voidEnableIRQ(EXTI15_10_IRQn);
 8001034:	2028      	movs	r0, #40	; 0x28
 8001036:	f000 fb1b 	bl	8001670 <MNVIC_voidEnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013c00 	.word	0x40013c00
 8001048:	2000006c 	.word	0x2000006c
 800104c:	40013808 	.word	0x40013808
 8001050:	4001380c 	.word	0x4001380c
 8001054:	40013810 	.word	0x40013810
 8001058:	40013814 	.word	0x40013814

0800105c <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MEXTI_voidClearPendingFlag+0x2c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	4611      	mov	r1, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <MEXTI_voidClearPendingFlag+0x2c>)
 8001076:	430b      	orrs	r3, r1
 8001078:	6153      	str	r3, [r2, #20]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40013c00 	.word	0x40013c00

0800108c <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MEXTI_u8GetPendingFlag+0x28>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b2db      	uxtb	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <EXTI0_IRQHandler+0x1c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <EXTI0_IRQHandler+0x1c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff ffc6 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000006c 	.word	0x2000006c

080010d8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <EXTI1_IRQHandler+0x1c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <EXTI1_IRQHandler+0x1c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff ffb6 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000006c 	.word	0x2000006c

080010f8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <EXTI2_IRQHandler+0x1c>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <EXTI2_IRQHandler+0x1c>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 800110a:	2002      	movs	r0, #2
 800110c:	f7ff ffa6 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000006c 	.word	0x2000006c

08001118 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <EXTI3_IRQHandler+0x1c>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <EXTI3_IRQHandler+0x1c>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 800112a:	2003      	movs	r0, #3
 800112c:	f7ff ff96 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000006c 	.word	0x2000006c

08001138 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <EXTI4_IRQHandler+0x1c>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <EXTI4_IRQHandler+0x1c>)
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 800114a:	2004      	movs	r0, #4
 800114c:	f7ff ff86 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000006c 	.word	0x2000006c

08001158 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 800115c:	2005      	movs	r0, #5
 800115e:	f7ff ff95 	bl	800108c <MEXTI_u8GetPendingFlag>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00a      	beq.n	800117e <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8001176:	2005      	movs	r0, #5
 8001178:	f7ff ff70 	bl	800105c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 800117c:	e042      	b.n	8001204 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff84 	bl	800108c <MEXTI_u8GetPendingFlag>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00a      	beq.n	80011a0 <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8001198:	2006      	movs	r0, #6
 800119a:	f7ff ff5f 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 800119e:	e031      	b.n	8001204 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 80011a0:	2007      	movs	r0, #7
 80011a2:	f7ff ff73 	bl	800108c <MEXTI_u8GetPendingFlag>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 80011ba:	2007      	movs	r0, #7
 80011bc:	f7ff ff4e 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80011c0:	e020      	b.n	8001204 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff ff62 	bl	800108c <MEXTI_u8GetPendingFlag>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00a      	beq.n	80011e4 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 80011dc:	2008      	movs	r0, #8
 80011de:	f7ff ff3d 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80011e2:	e00f      	b.n	8001204 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 80011e4:	2009      	movs	r0, #9
 80011e6:	f7ff ff51 	bl	800108c <MEXTI_u8GetPendingFlag>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d009      	beq.n	8001204 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <EXTI9_5_IRQHandler+0xb0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 80011fe:	2009      	movs	r0, #9
 8001200:	f7ff ff2c 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000006c 	.word	0x2000006c

0800120c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8001210:	200a      	movs	r0, #10
 8001212:	f7ff ff3b 	bl	800108c <MEXTI_u8GetPendingFlag>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00a      	beq.n	8001232 <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 8001226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001228:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 800122a:	200a      	movs	r0, #10
 800122c:	f7ff ff16 	bl	800105c <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8001230:	e053      	b.n	80012da <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8001232:	200b      	movs	r0, #11
 8001234:	f7ff ff2a 	bl	800108c <MEXTI_u8GetPendingFlag>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 800124c:	200b      	movs	r0, #11
 800124e:	f7ff ff05 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001252:	e042      	b.n	80012da <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8001254:	200c      	movs	r0, #12
 8001256:	f7ff ff19 	bl	800108c <MEXTI_u8GetPendingFlag>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 800126e:	200c      	movs	r0, #12
 8001270:	f7ff fef4 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001274:	e031      	b.n	80012da <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8001276:	200d      	movs	r0, #13
 8001278:	f7ff ff08 	bl	800108c <MEXTI_u8GetPendingFlag>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00a      	beq.n	8001298 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 8001284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 8001290:	200d      	movs	r0, #13
 8001292:	f7ff fee3 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 8001296:	e020      	b.n	80012da <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8001298:	200e      	movs	r0, #14
 800129a:	f7ff fef7 	bl	800108c <MEXTI_u8GetPendingFlag>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00a      	beq.n	80012ba <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 80012a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d002      	beq.n	80012b2 <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 80012ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b0:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 80012b2:	200e      	movs	r0, #14
 80012b4:	f7ff fed2 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80012b8:	e00f      	b.n	80012da <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fee6 	bl	800108c <MEXTI_u8GetPendingFlag>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 80012c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <EXTI15_10_IRQHandler+0xd4>)
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 80012d4:	200f      	movs	r0, #15
 80012d6:	f7ff fec1 	bl	800105c <MEXTI_voidClearPendingFlag>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000006c 	.word	0x2000006c

080012e4 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	460b      	mov	r3, r1
 80012f0:	71bb      	strb	r3, [r7, #6]
 80012f2:	4613      	mov	r3, r2
 80012f4:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d02c      	beq.n	8001356 <GPIO_voidSetPinMode+0x72>
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	dc3d      	bgt.n	800137c <GPIO_voidSetPinMode+0x98>
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <GPIO_voidSetPinMode+0x26>
 8001304:	2b01      	cmp	r3, #1
 8001306:	d013      	beq.n	8001330 <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8001308:	e038      	b.n	800137c <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <GPIO_voidSetPinMode+0xa8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	0052      	lsls	r2, r2, #1
 8001312:	2103      	movs	r1, #3
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	43d2      	mvns	r2, r2
 800131a:	4013      	ands	r3, r2
 800131c:	7979      	ldrb	r1, [r7, #5]
 800131e:	79ba      	ldrb	r2, [r7, #6]
 8001320:	0052      	lsls	r2, r2, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	4611      	mov	r1, r2
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <GPIO_voidSetPinMode+0xa8>)
 800132a:	430b      	orrs	r3, r1
 800132c:	6013      	str	r3, [r2, #0]
      break;
 800132e:	e026      	b.n	800137e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <GPIO_voidSetPinMode+0xac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	79ba      	ldrb	r2, [r7, #6]
 8001336:	0052      	lsls	r2, r2, #1
 8001338:	2103      	movs	r1, #3
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	43d2      	mvns	r2, r2
 8001340:	4013      	ands	r3, r2
 8001342:	7979      	ldrb	r1, [r7, #5]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	4611      	mov	r1, r2
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <GPIO_voidSetPinMode+0xac>)
 8001350:	430b      	orrs	r3, r1
 8001352:	6013      	str	r3, [r2, #0]
      break;
 8001354:	e013      	b.n	800137e <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <GPIO_voidSetPinMode+0xb0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	79ba      	ldrb	r2, [r7, #6]
 800135c:	0052      	lsls	r2, r2, #1
 800135e:	2103      	movs	r1, #3
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	43d2      	mvns	r2, r2
 8001366:	4013      	ands	r3, r2
 8001368:	7979      	ldrb	r1, [r7, #5]
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	0052      	lsls	r2, r2, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4611      	mov	r1, r2
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <GPIO_voidSetPinMode+0xb0>)
 8001376:	430b      	orrs	r3, r1
 8001378:	6013      	str	r3, [r2, #0]
      break;
 800137a:	e000      	b.n	800137e <GPIO_voidSetPinMode+0x9a>
      break;
 800137c:	bf00      	nop
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800

08001398 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	460b      	mov	r3, r1
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d028      	beq.n	8001402 <GPIO_voidSetPinOutputMode+0x6a>
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	dc37      	bgt.n	8001424 <GPIO_voidSetPinOutputMode+0x8c>
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <GPIO_voidSetPinOutputMode+0x26>
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d011      	beq.n	80013e0 <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 80013bc:	e032      	b.n	8001424 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <GPIO_voidSetPinOutputMode+0x9c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	79ba      	ldrb	r2, [r7, #6]
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	43d2      	mvns	r2, r2
 80013cc:	4013      	ands	r3, r2
 80013ce:	7979      	ldrb	r1, [r7, #5]
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	4611      	mov	r1, r2
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <GPIO_voidSetPinOutputMode+0x9c>)
 80013da:	430b      	orrs	r3, r1
 80013dc:	6013      	str	r3, [r2, #0]
      break;
 80013de:	e022      	b.n	8001426 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <GPIO_voidSetPinOutputMode+0x9c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	79ba      	ldrb	r2, [r7, #6]
 80013e6:	2101      	movs	r1, #1
 80013e8:	fa01 f202 	lsl.w	r2, r1, r2
 80013ec:	43d2      	mvns	r2, r2
 80013ee:	4013      	ands	r3, r2
 80013f0:	7979      	ldrb	r1, [r7, #5]
 80013f2:	79ba      	ldrb	r2, [r7, #6]
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <GPIO_voidSetPinOutputMode+0x9c>)
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6013      	str	r3, [r2, #0]
      break;
 8001400:	e011      	b.n	8001426 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <GPIO_voidSetPinOutputMode+0xa0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	43d2      	mvns	r2, r2
 8001410:	4013      	ands	r3, r2
 8001412:	7979      	ldrb	r1, [r7, #5]
 8001414:	79ba      	ldrb	r2, [r7, #6]
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	4611      	mov	r1, r2
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <GPIO_voidSetPinOutputMode+0xa0>)
 800141e:	430b      	orrs	r3, r1
 8001420:	6013      	str	r3, [r2, #0]
      break;
 8001422:	e000      	b.n	8001426 <GPIO_voidSetPinOutputMode+0x8e>
      break;
 8001424:	bf00      	nop
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40020404 	.word	0x40020404
 8001438:	40020804 	.word	0x40020804

0800143c <GPIO_voidSetPinOutputSpeed>:
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b02      	cmp	r3, #2
 8001452:	d02c      	beq.n	80014ae <GPIO_voidSetPinOutputSpeed+0x72>
 8001454:	2b02      	cmp	r3, #2
 8001456:	dc3d      	bgt.n	80014d4 <GPIO_voidSetPinOutputSpeed+0x98>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <GPIO_voidSetPinOutputSpeed+0x26>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d013      	beq.n	8001488 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 8001460:	e038      	b.n	80014d4 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	0052      	lsls	r2, r2, #1
 800146a:	2103      	movs	r1, #3
 800146c:	fa01 f202 	lsl.w	r2, r1, r2
 8001470:	43d2      	mvns	r2, r2
 8001472:	4013      	ands	r3, r2
 8001474:	7979      	ldrb	r1, [r7, #5]
 8001476:	79ba      	ldrb	r2, [r7, #6]
 8001478:	0052      	lsls	r2, r2, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4611      	mov	r1, r2
 8001480:	4a18      	ldr	r2, [pc, #96]	; (80014e4 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]
      break;
 8001486:	e026      	b.n	80014d6 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <GPIO_voidSetPinOutputSpeed+0xac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	79ba      	ldrb	r2, [r7, #6]
 800148e:	0052      	lsls	r2, r2, #1
 8001490:	2103      	movs	r1, #3
 8001492:	fa01 f202 	lsl.w	r2, r1, r2
 8001496:	43d2      	mvns	r2, r2
 8001498:	4013      	ands	r3, r2
 800149a:	7979      	ldrb	r1, [r7, #5]
 800149c:	79ba      	ldrb	r2, [r7, #6]
 800149e:	0052      	lsls	r2, r2, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4611      	mov	r1, r2
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <GPIO_voidSetPinOutputSpeed+0xac>)
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
      break;
 80014ac:	e013      	b.n	80014d6 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <GPIO_voidSetPinOutputSpeed+0xb0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	0052      	lsls	r2, r2, #1
 80014b6:	2103      	movs	r1, #3
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	43d2      	mvns	r2, r2
 80014be:	4013      	ands	r3, r2
 80014c0:	7979      	ldrb	r1, [r7, #5]
 80014c2:	79ba      	ldrb	r2, [r7, #6]
 80014c4:	0052      	lsls	r2, r2, #1
 80014c6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ca:	4611      	mov	r1, r2
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <GPIO_voidSetPinOutputSpeed+0xb0>)
 80014ce:	430b      	orrs	r3, r1
 80014d0:	6013      	str	r3, [r2, #0]
      break;
 80014d2:	e000      	b.n	80014d6 <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 80014d4:	bf00      	nop
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40020008 	.word	0x40020008
 80014e8:	40020408 	.word	0x40020408
 80014ec:	40020808 	.word	0x40020808

080014f0 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	460b      	mov	r3, r1
 80014fc:	71bb      	strb	r3, [r7, #6]
 80014fe:	4613      	mov	r3, r2
 8001500:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d02c      	beq.n	8001562 <GPIO_voidSetPinValue+0x72>
 8001508:	2b02      	cmp	r3, #2
 800150a:	dc3d      	bgt.n	8001588 <GPIO_voidSetPinValue+0x98>
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <GPIO_voidSetPinValue+0x26>
 8001510:	2b01      	cmp	r3, #1
 8001512:	d013      	beq.n	800153c <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 8001514:	e038      	b.n	8001588 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	2201      	movs	r2, #1
 8001520:	409a      	lsls	r2, r3
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <GPIO_voidSetPinValue+0xb4>)
 8001524:	601a      	str	r2, [r3, #0]
      break;
 8001526:	e031      	b.n	800158c <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d12e      	bne.n	800158c <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001534:	409a      	lsls	r2, r3
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <GPIO_voidSetPinValue+0xb4>)
 8001538:	601a      	str	r2, [r3, #0]
      break;
 800153a:	e027      	b.n	800158c <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 800153c:	797b      	ldrb	r3, [r7, #5]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2201      	movs	r2, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <GPIO_voidSetPinValue+0xb8>)
 800154a:	601a      	str	r2, [r3, #0]
      break;
 800154c:	e020      	b.n	8001590 <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 800154e:	797b      	ldrb	r3, [r7, #5]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d11d      	bne.n	8001590 <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800155a:	409a      	lsls	r2, r3
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <GPIO_voidSetPinValue+0xb8>)
 800155e:	601a      	str	r2, [r3, #0]
      break;
 8001560:	e016      	b.n	8001590 <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 8001562:	797b      	ldrb	r3, [r7, #5]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	2201      	movs	r2, #1
 800156c:	409a      	lsls	r2, r3
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <GPIO_voidSetPinValue+0xbc>)
 8001570:	601a      	str	r2, [r3, #0]
      break;
 8001572:	e00f      	b.n	8001594 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001574:	797b      	ldrb	r3, [r7, #5]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001580:	409a      	lsls	r2, r3
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <GPIO_voidSetPinValue+0xbc>)
 8001584:	601a      	str	r2, [r3, #0]
      break;
 8001586:	e005      	b.n	8001594 <GPIO_voidSetPinValue+0xa4>
      break;
 8001588:	bf00      	nop
 800158a:	e004      	b.n	8001596 <GPIO_voidSetPinValue+0xa6>
      break;
 800158c:	bf00      	nop
 800158e:	e002      	b.n	8001596 <GPIO_voidSetPinValue+0xa6>
      break;
 8001590:	bf00      	nop
 8001592:	e000      	b.n	8001596 <GPIO_voidSetPinValue+0xa6>
      break;
 8001594:	bf00      	nop
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40020018 	.word	0x40020018
 80015a8:	40020418 	.word	0x40020418
 80015ac:	40020818 	.word	0x40020818

080015b0 <GPIO_voidSetPinPullUpDownResistor>:
void GPIO_voidSetPinPullUpDownResistor(port_index_t Copy_PortIndex,
                                       pin_index_t Copy_PinIndex,
                                       input_pin_mode_t Copy_InputPinMode) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	460b      	mov	r3, r1
 80015bc:	71bb      	strb	r3, [r7, #6]
 80015be:	4613      	mov	r3, r2
 80015c0:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d02c      	beq.n	8001622 <GPIO_voidSetPinPullUpDownResistor+0x72>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc3d      	bgt.n	8001648 <GPIO_voidSetPinPullUpDownResistor+0x98>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <GPIO_voidSetPinPullUpDownResistor+0x26>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d013      	beq.n	80015fc <GPIO_voidSetPinPullUpDownResistor+0x4c>
      MODIFY_REG(GPIOC_PUPDR,
                 GPIO_PUPDR_CLEAR_MASK << GPIO_PUPDR_PIN_BITS * Copy_PinIndex,
                 Copy_InputPinMode << GPIO_PUPDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80015d4:	e038      	b.n	8001648 <GPIO_voidSetPinPullUpDownResistor+0x98>
      MODIFY_REG(GPIOA_PUPDR,
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	0052      	lsls	r2, r2, #1
 80015de:	2103      	movs	r1, #3
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	43d2      	mvns	r2, r2
 80015e6:	4013      	ands	r3, r2
 80015e8:	7979      	ldrb	r1, [r7, #5]
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	0052      	lsls	r2, r2, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	4611      	mov	r1, r2
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <GPIO_voidSetPinPullUpDownResistor+0xa8>)
 80015f6:	430b      	orrs	r3, r1
 80015f8:	6013      	str	r3, [r2, #0]
      break;
 80015fa:	e026      	b.n	800164a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOB_PUPDR,
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <GPIO_voidSetPinPullUpDownResistor+0xac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	79ba      	ldrb	r2, [r7, #6]
 8001602:	0052      	lsls	r2, r2, #1
 8001604:	2103      	movs	r1, #3
 8001606:	fa01 f202 	lsl.w	r2, r1, r2
 800160a:	43d2      	mvns	r2, r2
 800160c:	4013      	ands	r3, r2
 800160e:	7979      	ldrb	r1, [r7, #5]
 8001610:	79ba      	ldrb	r2, [r7, #6]
 8001612:	0052      	lsls	r2, r2, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	4611      	mov	r1, r2
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <GPIO_voidSetPinPullUpDownResistor+0xac>)
 800161c:	430b      	orrs	r3, r1
 800161e:	6013      	str	r3, [r2, #0]
      break;
 8001620:	e013      	b.n	800164a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      MODIFY_REG(GPIOC_PUPDR,
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	79ba      	ldrb	r2, [r7, #6]
 8001628:	0052      	lsls	r2, r2, #1
 800162a:	2103      	movs	r1, #3
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	43d2      	mvns	r2, r2
 8001632:	4013      	ands	r3, r2
 8001634:	7979      	ldrb	r1, [r7, #5]
 8001636:	79ba      	ldrb	r2, [r7, #6]
 8001638:	0052      	lsls	r2, r2, #1
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	4611      	mov	r1, r2
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <GPIO_voidSetPinPullUpDownResistor+0xb0>)
 8001642:	430b      	orrs	r3, r1
 8001644:	6013      	str	r3, [r2, #0]
      break;
 8001646:	e000      	b.n	800164a <GPIO_voidSetPinPullUpDownResistor+0x9a>
      break;
 8001648:	bf00      	nop
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	4002000c 	.word	0x4002000c
 800165c:	4002040c 	.word	0x4002040c
 8001660:	4002080c 	.word	0x4002080c

08001664 <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8001668:	f000 f8da 	bl	8001820 <MSCB_voidSetPriorityGrouping>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <MNVIC_voidEnableIRQ>:

void MNVIC_voidEnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
	if(IRQn >=0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <MNVIC_voidEnableIRQ+0x2a>
	{
		NVIC->ISER[((u32)IRQn >> 5)] = (1UL << ((u32)IRQn & 0x1F));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <MNVIC_voidEnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d2:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 80016d4:	bf00      	nop
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <RCC_void_HSI_Init+0x58>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f9      	beq.n	80016d6 <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <RCC_void_HSI_Init+0x5c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <RCC_void_HSI_Init+0x5c>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <RCC_void_HSI_Init+0x5c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <RCC_void_HSI_Init+0x5c>)
 80016f4:	f023 0302 	bic.w	r3, r3, #2
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	40023800 	.word	0x40023800
 8001708:	40023808 	.word	0x40023808

0800170c <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_1;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_2
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800171a:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_2;
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <RCC_void_AHB1Prescaler_Init+0x28>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <RCC_void_AHB1Prescaler_Init+0x28>)
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023808 	.word	0x40023808

08001738 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <RCC_void_APB1Prescaler_Init+0x24>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <RCC_void_APB1Prescaler_Init+0x24>)
 8001742:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001746:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <RCC_void_APB1Prescaler_Init+0x24>)
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <RCC_void_APB1Prescaler_Init+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023808 	.word	0x40023808

08001760 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <RCC_void_APB2Prescaler_Init+0x24>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <RCC_void_APB2Prescaler_Init+0x24>)
 800176a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800176e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <RCC_void_APB2Prescaler_Init+0x24>)
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <RCC_void_APB2Prescaler_Init+0x24>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023808 	.word	0x40023808

08001788 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 800178c:	f7ff ff8e 	bl	80016ac <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8001790:	f7ff ffbc 	bl	800170c <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 8001794:	f7ff ffd0 	bl	8001738 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8001798:	f7ff ffe2 	bl	8001760 <RCC_void_APB2Prescaler_Init>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d01c      	beq.n	80017f0 <RCC_voidEnablePeripheralClock+0x50>
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	dc25      	bgt.n	8001806 <RCC_voidEnablePeripheralClock+0x66>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <RCC_voidEnablePeripheralClock+0x24>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d00b      	beq.n	80017da <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 80017c2:	e020      	b.n	8001806 <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <RCC_voidEnablePeripheralClock+0x74>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4611      	mov	r1, r2
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <RCC_voidEnablePeripheralClock+0x74>)
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6013      	str	r3, [r2, #0]
        break;
 80017d8:	e016      	b.n	8001808 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <RCC_voidEnablePeripheralClock+0x78>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	79ba      	ldrb	r2, [r7, #6]
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	4611      	mov	r1, r2
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <RCC_voidEnablePeripheralClock+0x78>)
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6013      	str	r3, [r2, #0]
        break;
 80017ee:	e00b      	b.n	8001808 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <RCC_voidEnablePeripheralClock+0x7c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	79ba      	ldrb	r2, [r7, #6]
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f202 	lsl.w	r2, r1, r2
 80017fc:	4611      	mov	r1, r2
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <RCC_voidEnablePeripheralClock+0x7c>)
 8001800:	430b      	orrs	r3, r1
 8001802:	6013      	str	r3, [r2, #0]
        break;  
 8001804:	e000      	b.n	8001808 <RCC_voidEnablePeripheralClock+0x68>
        break;
 8001806:	bf00      	nop
    }
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023830 	.word	0x40023830
 8001818:	40023840 	.word	0x40023840
 800181c:	40023844 	.word	0x40023844

08001820 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 800182a:	2305      	movs	r3, #5
 800182c:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <MSCB_voidSetPriorityGrouping+0x44>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183a:	4013      	ands	r3, r2
 800183c:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	021a      	lsls	r2, r3, #8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184e:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <MSCB_voidSetPriorityGrouping+0x44>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60d3      	str	r3, [r2, #12]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MSysTick_voidInit+0x34>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <MSysTick_voidInit+0x34>)
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <MSysTick_voidInit+0x34>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <MSysTick_voidInit+0x34>)
 800187e:	f023 0302 	bic.w	r3, r3, #2
 8001882:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <MSysTick_voidInit+0x34>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <MSysTick_voidInit+0x34>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <MSysTick_voidDeInit+0x34>)
 80018c2:	f023 0302 	bic.w	r3, r3, #2
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <MSysTick_u32GetElapsedTime_us>:
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
	/* Return The Local Variable */
	return Local_ElapsedTicks;
}
u32 MSysTick_u32GetElapsedTime_us(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
	u32 Local_ElapsedTicks = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
	u32 Local_ElapsedTime_us = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
	/* Copy The SysTick Elapsed Ticks to a Local Variable */
	Local_ElapsedTicks =  (SysTick->LOAD - SysTick->VAL);
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MSysTick_u32GetElapsedTime_us+0x2c>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MSysTick_u32GetElapsedTime_us+0x2c>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	607b      	str	r3, [r7, #4]
	Local_ElapsedTime_us = Local_ElapsedTicks /((u32)((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000000.0));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
	/* Return The Local Variable */
	return Local_ElapsedTime_us;
 80018f6:	683b      	ldr	r3, [r7, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e010 	.word	0xe000e010

08001908 <MSystick_voidResetTimer>:
	/* Return The Local Variable */
	return Local_RemainingTicks;
}

void MSystick_voidResetTimer(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	SysTick->VAL = 0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <MSystick_voidResetTimer+0x14>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e010 	.word	0xe000e010

08001920 <MSystick_voidSetPreloadvalue>:

void MSystick_voidSetPreloadvalue(u32 Copy_u32Ticks)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = Copy_u32Ticks;
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <MSystick_voidSetPreloadvalue+0x20>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <MSystick_voidSetPreloadvalue+0x20>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e010 	.word	0xe000e010

08001944 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <SysTick_Handler+0x24>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 8001952:	f7ff ffa5 	bl	80018a0 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <SysTick_Handler+0x28>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <SysTick_Handler+0x28>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4798      	blx	r3
	}
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200000b0 	.word	0x200000b0
 800196c:	200000ac 	.word	0x200000ac

08001970 <MSystick_Delay_ms>:

void MSystick_Delay_ms(u32 time_ms)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  u32 Local_ticks = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7fe fe95 	bl	80006ac <__aeabi_ui2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MSystick_Delay_ms+0x68>)
 8001988:	f7fe fc24 	bl	80001d4 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7fe ff04 	bl	80007a0 <__aeabi_d2uiz>
 8001998:	4603      	mov	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]
  if(Local_ticks>SysTick_LOAD_RELOAD_Msk){
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a2:	d302      	bcc.n	80019aa <MSystick_Delay_ms+0x3a>
    Local_ticks = SysTick_LOAD_RELOAD_Msk;
 80019a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80019a8:	60fb      	str	r3, [r7, #12]
  }
   /* Set Reload Register to SysTick Ticks */
  SysTick->LOAD = Local_ticks;
 80019aa:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <MSystick_Delay_ms+0x6c>)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6053      	str	r3, [r2, #4]
  SysTick->VAL = 0;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <MSystick_Delay_ms+0x6c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  /* Wait The COUNTFLAG Returns 1 */
   while (GET_BIT(SysTick->CTRL,SysTick_CTRL_COUNTFLAG_Pos) == 0);
 80019b6:	bf00      	nop
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <MSystick_Delay_ms+0x6c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f9      	beq.n	80019b8 <MSystick_Delay_ms+0x48>
  /* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <MSystick_Delay_ms+0x6c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <MSystick_Delay_ms+0x6c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	408f4000 	.word	0x408f4000
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	RCC_voidInit();
 80019e4:	f7ff fed0 	bl	8001788 <RCC_voidInit>
	MSysTick_voidInit();
 80019e8:	f7ff ff3e 	bl	8001868 <MSysTick_voidInit>
	MNVIC_voidInit();
 80019ec:	f7ff fe3a 	bl	8001664 <MNVIC_voidInit>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f8:	f7ff fff2 	bl	80019e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	; (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a22:	f000 f811 	bl	8001a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7ff f9fd 	bl	8000e24 <main>

08001a2a <LoopForever>:

LoopForever:
  b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8001a38:	08001ab0 	.word	0x08001ab0
  ldr r2, =_sbss
 8001a3c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001a40:	200000b4 	.word	0x200000b4

08001a44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC_IRQHandler>
	...

08001a48 <__libc_init_array>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4d0d      	ldr	r5, [pc, #52]	; (8001a80 <__libc_init_array+0x38>)
 8001a4c:	4c0d      	ldr	r4, [pc, #52]	; (8001a84 <__libc_init_array+0x3c>)
 8001a4e:	1b64      	subs	r4, r4, r5
 8001a50:	10a4      	asrs	r4, r4, #2
 8001a52:	2600      	movs	r6, #0
 8001a54:	42a6      	cmp	r6, r4
 8001a56:	d109      	bne.n	8001a6c <__libc_init_array+0x24>
 8001a58:	4d0b      	ldr	r5, [pc, #44]	; (8001a88 <__libc_init_array+0x40>)
 8001a5a:	4c0c      	ldr	r4, [pc, #48]	; (8001a8c <__libc_init_array+0x44>)
 8001a5c:	f000 f818 	bl	8001a90 <_init>
 8001a60:	1b64      	subs	r4, r4, r5
 8001a62:	10a4      	asrs	r4, r4, #2
 8001a64:	2600      	movs	r6, #0
 8001a66:	42a6      	cmp	r6, r4
 8001a68:	d105      	bne.n	8001a76 <__libc_init_array+0x2e>
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a70:	4798      	blx	r3
 8001a72:	3601      	adds	r6, #1
 8001a74:	e7ee      	b.n	8001a54 <__libc_init_array+0xc>
 8001a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7a:	4798      	blx	r3
 8001a7c:	3601      	adds	r6, #1
 8001a7e:	e7f2      	b.n	8001a66 <__libc_init_array+0x1e>
 8001a80:	08001aa8 	.word	0x08001aa8
 8001a84:	08001aa8 	.word	0x08001aa8
 8001a88:	08001aa8 	.word	0x08001aa8
 8001a8c:	08001aac 	.word	0x08001aac

08001a90 <_init>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr

08001a9c <_fini>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr
