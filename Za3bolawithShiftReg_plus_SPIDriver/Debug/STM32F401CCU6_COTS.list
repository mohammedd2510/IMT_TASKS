
STM32F401CCU6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001774  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c60  08001c60  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001c60  08001c60  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c60  08001c60  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000024  08001c8c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001c8c  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003146  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001018  00000000  00000000  000231dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  000241f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bb8  00000000  00000000  000246e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000043e3  00000000  00000000  00026298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000af78  00000000  00000000  0002a67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000355  00000000  00000000  000355f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001154  00000000  00000000  00035948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00036a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080018f0 	.word	0x080018f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080018f0 	.word	0x080018f0

080001d4 <__aeabi_dmul>:
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e2:	bf1d      	ittte	ne
 80001e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e8:	ea94 0f0c 	teqne	r4, ip
 80001ec:	ea95 0f0c 	teqne	r5, ip
 80001f0:	f000 f8de 	bleq	80003b0 <__aeabi_dmul+0x1dc>
 80001f4:	442c      	add	r4, r5
 80001f6:	ea81 0603 	eor.w	r6, r1, r3
 80001fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000202:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000206:	bf18      	it	ne
 8000208:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800020c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000214:	d038      	beq.n	8000288 <__aeabi_dmul+0xb4>
 8000216:	fba0 ce02 	umull	ip, lr, r0, r2
 800021a:	f04f 0500 	mov.w	r5, #0
 800021e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000222:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000226:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022a:	f04f 0600 	mov.w	r6, #0
 800022e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000232:	f09c 0f00 	teq	ip, #0
 8000236:	bf18      	it	ne
 8000238:	f04e 0e01 	orrne.w	lr, lr, #1
 800023c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000240:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000244:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000248:	d204      	bcs.n	8000254 <__aeabi_dmul+0x80>
 800024a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024e:	416d      	adcs	r5, r5
 8000250:	eb46 0606 	adc.w	r6, r6, r6
 8000254:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000258:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800025c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000260:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000264:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000268:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800026c:	bf88      	it	hi
 800026e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000272:	d81e      	bhi.n	80002b2 <__aeabi_dmul+0xde>
 8000274:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800028c:	ea46 0101 	orr.w	r1, r6, r1
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	ea81 0103 	eor.w	r1, r1, r3
 8000298:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800029c:	bfc2      	ittt	gt
 800029e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a6:	bd70      	popgt	{r4, r5, r6, pc}
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f04f 0e00 	mov.w	lr, #0
 80002b0:	3c01      	subs	r4, #1
 80002b2:	f300 80ab 	bgt.w	800040c <__aeabi_dmul+0x238>
 80002b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ba:	bfde      	ittt	le
 80002bc:	2000      	movle	r0, #0
 80002be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c2:	bd70      	pople	{r4, r5, r6, pc}
 80002c4:	f1c4 0400 	rsb	r4, r4, #0
 80002c8:	3c20      	subs	r4, #32
 80002ca:	da35      	bge.n	8000338 <__aeabi_dmul+0x164>
 80002cc:	340c      	adds	r4, #12
 80002ce:	dc1b      	bgt.n	8000308 <__aeabi_dmul+0x134>
 80002d0:	f104 0414 	add.w	r4, r4, #20
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f305 	lsl.w	r3, r0, r5
 80002dc:	fa20 f004 	lsr.w	r0, r0, r4
 80002e0:	fa01 f205 	lsl.w	r2, r1, r5
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f4:	fa21 f604 	lsr.w	r6, r1, r4
 80002f8:	eb42 0106 	adc.w	r1, r2, r6
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 040c 	rsb	r4, r4, #12
 800030c:	f1c4 0520 	rsb	r5, r4, #32
 8000310:	fa00 f304 	lsl.w	r3, r0, r4
 8000314:	fa20 f005 	lsr.w	r0, r0, r5
 8000318:	fa01 f204 	lsl.w	r2, r1, r4
 800031c:	ea40 0002 	orr.w	r0, r0, r2
 8000320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	f141 0100 	adc.w	r1, r1, #0
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f205 	lsl.w	r2, r0, r5
 8000340:	ea4e 0e02 	orr.w	lr, lr, r2
 8000344:	fa20 f304 	lsr.w	r3, r0, r4
 8000348:	fa01 f205 	lsl.w	r2, r1, r5
 800034c:	ea43 0302 	orr.w	r3, r3, r2
 8000350:	fa21 f004 	lsr.w	r0, r1, r4
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	fa21 f204 	lsr.w	r2, r1, r4
 800035c:	ea20 0002 	bic.w	r0, r0, r2
 8000360:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000368:	bf08      	it	eq
 800036a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f094 0f00 	teq	r4, #0
 8000374:	d10f      	bne.n	8000396 <__aeabi_dmul+0x1c2>
 8000376:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037a:	0040      	lsls	r0, r0, #1
 800037c:	eb41 0101 	adc.w	r1, r1, r1
 8000380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000384:	bf08      	it	eq
 8000386:	3c01      	subeq	r4, #1
 8000388:	d0f7      	beq.n	800037a <__aeabi_dmul+0x1a6>
 800038a:	ea41 0106 	orr.w	r1, r1, r6
 800038e:	f095 0f00 	teq	r5, #0
 8000392:	bf18      	it	ne
 8000394:	4770      	bxne	lr
 8000396:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	eb43 0303 	adc.w	r3, r3, r3
 80003a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a4:	bf08      	it	eq
 80003a6:	3d01      	subeq	r5, #1
 80003a8:	d0f7      	beq.n	800039a <__aeabi_dmul+0x1c6>
 80003aa:	ea43 0306 	orr.w	r3, r3, r6
 80003ae:	4770      	bx	lr
 80003b0:	ea94 0f0c 	teq	r4, ip
 80003b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b8:	bf18      	it	ne
 80003ba:	ea95 0f0c 	teqne	r5, ip
 80003be:	d00c      	beq.n	80003da <__aeabi_dmul+0x206>
 80003c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c4:	bf18      	it	ne
 80003c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ca:	d1d1      	bne.n	8000370 <__aeabi_dmul+0x19c>
 80003cc:	ea81 0103 	eor.w	r1, r1, r3
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003de:	bf06      	itte	eq
 80003e0:	4610      	moveq	r0, r2
 80003e2:	4619      	moveq	r1, r3
 80003e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e8:	d019      	beq.n	800041e <__aeabi_dmul+0x24a>
 80003ea:	ea94 0f0c 	teq	r4, ip
 80003ee:	d102      	bne.n	80003f6 <__aeabi_dmul+0x222>
 80003f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f4:	d113      	bne.n	800041e <__aeabi_dmul+0x24a>
 80003f6:	ea95 0f0c 	teq	r5, ip
 80003fa:	d105      	bne.n	8000408 <__aeabi_dmul+0x234>
 80003fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000400:	bf1c      	itt	ne
 8000402:	4610      	movne	r0, r2
 8000404:	4619      	movne	r1, r3
 8000406:	d10a      	bne.n	800041e <__aeabi_dmul+0x24a>
 8000408:	ea81 0103 	eor.w	r1, r1, r3
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000422:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <__aeabi_drsub>:
 8000428:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800042c:	e002      	b.n	8000434 <__adddf3>
 800042e:	bf00      	nop

08000430 <__aeabi_dsub>:
 8000430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000434 <__adddf3>:
 8000434:	b530      	push	{r4, r5, lr}
 8000436:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	bf1f      	itttt	ne
 800044a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000452:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000456:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045a:	f000 80e2 	beq.w	8000622 <__adddf3+0x1ee>
 800045e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000462:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000466:	bfb8      	it	lt
 8000468:	426d      	neglt	r5, r5
 800046a:	dd0c      	ble.n	8000486 <__adddf3+0x52>
 800046c:	442c      	add	r4, r5
 800046e:	ea80 0202 	eor.w	r2, r0, r2
 8000472:	ea81 0303 	eor.w	r3, r1, r3
 8000476:	ea82 0000 	eor.w	r0, r2, r0
 800047a:	ea83 0101 	eor.w	r1, r3, r1
 800047e:	ea80 0202 	eor.w	r2, r0, r2
 8000482:	ea81 0303 	eor.w	r3, r1, r3
 8000486:	2d36      	cmp	r5, #54	; 0x36
 8000488:	bf88      	it	hi
 800048a:	bd30      	pophi	{r4, r5, pc}
 800048c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000490:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000494:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000498:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800049c:	d002      	beq.n	80004a4 <__adddf3+0x70>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x84>
 80004b2:	4252      	negs	r2, r2
 80004b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b8:	ea94 0f05 	teq	r4, r5
 80004bc:	f000 80a7 	beq.w	800060e <__adddf3+0x1da>
 80004c0:	f1a4 0401 	sub.w	r4, r4, #1
 80004c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c8:	db0d      	blt.n	80004e6 <__adddf3+0xb2>
 80004ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ce:	fa22 f205 	lsr.w	r2, r2, r5
 80004d2:	1880      	adds	r0, r0, r2
 80004d4:	f141 0100 	adc.w	r1, r1, #0
 80004d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004dc:	1880      	adds	r0, r0, r2
 80004de:	fa43 f305 	asr.w	r3, r3, r5
 80004e2:	4159      	adcs	r1, r3
 80004e4:	e00e      	b.n	8000504 <__adddf3+0xd0>
 80004e6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ea:	f10e 0e20 	add.w	lr, lr, #32
 80004ee:	2a01      	cmp	r2, #1
 80004f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f4:	bf28      	it	cs
 80004f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	18c0      	adds	r0, r0, r3
 8000500:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	d507      	bpl.n	800051a <__adddf3+0xe6>
 800050a:	f04f 0e00 	mov.w	lr, #0
 800050e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000512:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000516:	eb6e 0101 	sbc.w	r1, lr, r1
 800051a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051e:	d31b      	bcc.n	8000558 <__adddf3+0x124>
 8000520:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000524:	d30c      	bcc.n	8000540 <__adddf3+0x10c>
 8000526:	0849      	lsrs	r1, r1, #1
 8000528:	ea5f 0030 	movs.w	r0, r0, rrx
 800052c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000530:	f104 0401 	add.w	r4, r4, #1
 8000534:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000538:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800053c:	f080 809a 	bcs.w	8000674 <__adddf3+0x240>
 8000540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000544:	bf08      	it	eq
 8000546:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054a:	f150 0000 	adcs.w	r0, r0, #0
 800054e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000552:	ea41 0105 	orr.w	r1, r1, r5
 8000556:	bd30      	pop	{r4, r5, pc}
 8000558:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800055c:	4140      	adcs	r0, r0
 800055e:	eb41 0101 	adc.w	r1, r1, r1
 8000562:	3c01      	subs	r4, #1
 8000564:	bf28      	it	cs
 8000566:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056a:	d2e9      	bcs.n	8000540 <__adddf3+0x10c>
 800056c:	f091 0f00 	teq	r1, #0
 8000570:	bf04      	itt	eq
 8000572:	4601      	moveq	r1, r0
 8000574:	2000      	moveq	r0, #0
 8000576:	fab1 f381 	clz	r3, r1
 800057a:	bf08      	it	eq
 800057c:	3320      	addeq	r3, #32
 800057e:	f1a3 030b 	sub.w	r3, r3, #11
 8000582:	f1b3 0220 	subs.w	r2, r3, #32
 8000586:	da0c      	bge.n	80005a2 <__adddf3+0x16e>
 8000588:	320c      	adds	r2, #12
 800058a:	dd08      	ble.n	800059e <__adddf3+0x16a>
 800058c:	f102 0c14 	add.w	ip, r2, #20
 8000590:	f1c2 020c 	rsb	r2, r2, #12
 8000594:	fa01 f00c 	lsl.w	r0, r1, ip
 8000598:	fa21 f102 	lsr.w	r1, r1, r2
 800059c:	e00c      	b.n	80005b8 <__adddf3+0x184>
 800059e:	f102 0214 	add.w	r2, r2, #20
 80005a2:	bfd8      	it	le
 80005a4:	f1c2 0c20 	rsble	ip, r2, #32
 80005a8:	fa01 f102 	lsl.w	r1, r1, r2
 80005ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b0:	bfdc      	itt	le
 80005b2:	ea41 010c 	orrle.w	r1, r1, ip
 80005b6:	4090      	lslle	r0, r2
 80005b8:	1ae4      	subs	r4, r4, r3
 80005ba:	bfa2      	ittt	ge
 80005bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c0:	4329      	orrge	r1, r5
 80005c2:	bd30      	popge	{r4, r5, pc}
 80005c4:	ea6f 0404 	mvn.w	r4, r4
 80005c8:	3c1f      	subs	r4, #31
 80005ca:	da1c      	bge.n	8000606 <__adddf3+0x1d2>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc0e      	bgt.n	80005ee <__adddf3+0x1ba>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0220 	rsb	r2, r4, #32
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f302 	lsl.w	r3, r1, r2
 80005e0:	ea40 0003 	orr.w	r0, r0, r3
 80005e4:	fa21 f304 	lsr.w	r3, r1, r4
 80005e8:	ea45 0103 	orr.w	r1, r5, r3
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	f1c4 040c 	rsb	r4, r4, #12
 80005f2:	f1c4 0220 	rsb	r2, r4, #32
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 f304 	lsl.w	r3, r1, r4
 80005fe:	ea40 0003 	orr.w	r0, r0, r3
 8000602:	4629      	mov	r1, r5
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	fa21 f004 	lsr.w	r0, r1, r4
 800060a:	4629      	mov	r1, r5
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	f094 0f00 	teq	r4, #0
 8000612:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000616:	bf06      	itte	eq
 8000618:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800061c:	3401      	addeq	r4, #1
 800061e:	3d01      	subne	r5, #1
 8000620:	e74e      	b.n	80004c0 <__adddf3+0x8c>
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf18      	it	ne
 8000628:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800062c:	d029      	beq.n	8000682 <__adddf3+0x24e>
 800062e:	ea94 0f05 	teq	r4, r5
 8000632:	bf08      	it	eq
 8000634:	ea90 0f02 	teqeq	r0, r2
 8000638:	d005      	beq.n	8000646 <__adddf3+0x212>
 800063a:	ea54 0c00 	orrs.w	ip, r4, r0
 800063e:	bf04      	itt	eq
 8000640:	4619      	moveq	r1, r3
 8000642:	4610      	moveq	r0, r2
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	ea91 0f03 	teq	r1, r3
 800064a:	bf1e      	ittt	ne
 800064c:	2100      	movne	r1, #0
 800064e:	2000      	movne	r0, #0
 8000650:	bd30      	popne	{r4, r5, pc}
 8000652:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000656:	d105      	bne.n	8000664 <__adddf3+0x230>
 8000658:	0040      	lsls	r0, r0, #1
 800065a:	4149      	adcs	r1, r1
 800065c:	bf28      	it	cs
 800065e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000668:	bf3c      	itt	cc
 800066a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066e:	bd30      	popcc	{r4, r5, pc}
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800067c:	f04f 0000 	mov.w	r0, #0
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000686:	bf1a      	itte	ne
 8000688:	4619      	movne	r1, r3
 800068a:	4610      	movne	r0, r2
 800068c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000690:	bf1c      	itt	ne
 8000692:	460b      	movne	r3, r1
 8000694:	4602      	movne	r2, r0
 8000696:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069a:	bf06      	itte	eq
 800069c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a0:	ea91 0f03 	teqeq	r1, r3
 80006a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop

080006ac <__aeabi_ui2d>:
 80006ac:	f090 0f00 	teq	r0, #0
 80006b0:	bf04      	itt	eq
 80006b2:	2100      	moveq	r1, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c0:	f04f 0500 	mov.w	r5, #0
 80006c4:	f04f 0100 	mov.w	r1, #0
 80006c8:	e750      	b.n	800056c <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_i2d>:
 80006cc:	f090 0f00 	teq	r0, #0
 80006d0:	bf04      	itt	eq
 80006d2:	2100      	moveq	r1, #0
 80006d4:	4770      	bxeq	lr
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e4:	bf48      	it	mi
 80006e6:	4240      	negmi	r0, r0
 80006e8:	f04f 0100 	mov.w	r1, #0
 80006ec:	e73e      	b.n	800056c <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2d>:
 80006f0:	0042      	lsls	r2, r0, #1
 80006f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fe:	bf1f      	itttt	ne
 8000700:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000708:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800070c:	4770      	bxne	lr
 800070e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000712:	bf08      	it	eq
 8000714:	4770      	bxeq	lr
 8000716:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071a:	bf04      	itt	eq
 800071c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000728:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000730:	e71c      	b.n	800056c <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_ul2d>:
 8000734:	ea50 0201 	orrs.w	r2, r0, r1
 8000738:	bf08      	it	eq
 800073a:	4770      	bxeq	lr
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	e00a      	b.n	800075a <__aeabi_l2d+0x16>

08000744 <__aeabi_l2d>:
 8000744:	ea50 0201 	orrs.w	r2, r0, r1
 8000748:	bf08      	it	eq
 800074a:	4770      	bxeq	lr
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000752:	d502      	bpl.n	800075a <__aeabi_l2d+0x16>
 8000754:	4240      	negs	r0, r0
 8000756:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000762:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000766:	f43f aed8 	beq.w	800051a <__adddf3+0xe6>
 800076a:	f04f 0203 	mov.w	r2, #3
 800076e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000772:	bf18      	it	ne
 8000774:	3203      	addne	r2, #3
 8000776:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077a:	bf18      	it	ne
 800077c:	3203      	addne	r2, #3
 800077e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000782:	f1c2 0320 	rsb	r3, r2, #32
 8000786:	fa00 fc03 	lsl.w	ip, r0, r3
 800078a:	fa20 f002 	lsr.w	r0, r0, r2
 800078e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000792:	ea40 000e 	orr.w	r0, r0, lr
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	4414      	add	r4, r2
 800079c:	e6bd      	b.n	800051a <__adddf3+0xe6>
 800079e:	bf00      	nop

080007a0 <__aeabi_d2uiz>:
 80007a0:	004a      	lsls	r2, r1, #1
 80007a2:	d211      	bcs.n	80007c8 <__aeabi_d2uiz+0x28>
 80007a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007a8:	d211      	bcs.n	80007ce <__aeabi_d2uiz+0x2e>
 80007aa:	d50d      	bpl.n	80007c8 <__aeabi_d2uiz+0x28>
 80007ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b4:	d40e      	bmi.n	80007d4 <__aeabi_d2uiz+0x34>
 80007b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d2:	d102      	bne.n	80007da <__aeabi_d2uiz+0x3a>
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	4770      	bx	lr
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	4770      	bx	lr

080007e0 <LEDMAT_SysTick_CallBack_Handler>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void LEDMAT_SysTick_CallBack_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
	LEDMAT_Delay_Flag = LEDMAT_DELAY_COMPLETED;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <LEDMAT_SysTick_CallBack_Handler+0x14>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	20000040 	.word	0x20000040

080007f8 <voidDisableAllRows>:
static void voidDisableAllRows(ledmat_t* ledmat_obj)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
 8000808:	e015      	b.n	8000836 <voidDisableAllRows+0x3e>
	{
#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
		GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
	}
#else
		CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data , ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21a      	sxth	r2, r3
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	5ccb      	ldrb	r3, [r1, r3]
 8000818:	4619      	mov	r1, r3
 800081a:	2301      	movs	r3, #1
 800081c:	408b      	lsls	r3, r1
 800081e:	b21b      	sxth	r3, r3
 8000820:	43db      	mvns	r3, r3
 8000822:	b21b      	sxth	r3, r3
 8000824:	4013      	ands	r3, r2
 8000826:	b21a      	sxth	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	b292      	uxth	r2, r2
 800082e:	801a      	strh	r2, [r3, #0]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	3301      	adds	r3, #1
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b07      	cmp	r3, #7
 800083a:	d9e6      	bls.n	800080a <voidDisableAllRows+0x12>
	}
		SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fa9b 	bl	8000d7c <SHIFTREG_voidLatchData>
#endif

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <voidDisableAllColumns>:
static void voidDisableAllColumns(ledmat_t* ledmat_obj)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	u8 Local_ColumnsCounter = ZERO_INIT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
 800085e:	e014      	b.n	800088a <voidDisableAllColumns+0x3c>
	{
#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
		GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_HIGH);
	}
#else
		SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data , ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b21a      	sxth	r2, r3
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	440b      	add	r3, r1
 800086e:	7a1b      	ldrb	r3, [r3, #8]
 8000870:	4619      	mov	r1, r3
 8000872:	2301      	movs	r3, #1
 8000874:	408b      	lsls	r3, r1
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21a      	sxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	b292      	uxth	r2, r2
 8000882:	801a      	strh	r2, [r3, #0]
	for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	3301      	adds	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b07      	cmp	r3, #7
 800088e:	d9e7      	bls.n	8000860 <voidDisableAllColumns+0x12>
	}
		SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fa71 	bl	8000d7c <SHIFTREG_voidLatchData>
#endif
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <voidUpdateScreen_WithDelay>:

static void voidUpdateScreen_WithDelay(ledmat_t* ledmat_obj, u32 time_ms)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	u8 Local_RowsCounter = ZERO_INIT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
	u8 Local_ColumnsCounter = ZERO_INIT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]
	gpio_logic_t Local_col_pin_logic = GPIO_HIGH;
 80008b6:	2301      	movs	r3, #1
 80008b8:	737b      	strb	r3, [r7, #13]
	voidDisableAllRows(ledmat_obj);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff9c 	bl	80007f8 <voidDisableAllRows>
	MSysTick_void_ASYNC_Delay_ms(time_ms, LEDMAT_SysTick_CallBack_Handler);
 80008c0:	494c      	ldr	r1, [pc, #304]	; (80009f4 <voidUpdateScreen_WithDelay+0x150>)
 80008c2:	6838      	ldr	r0, [r7, #0]
 80008c4:	f000 fe90 	bl	80015e8 <MSysTick_void_ASYNC_Delay_ms>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 80008c8:	e087      	b.n	80009da <voidUpdateScreen_WithDelay+0x136>
	{
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e080      	b.n	80009d2 <voidUpdateScreen_WithDelay+0x12e>
		{
			voidDisableAllColumns(ledmat_obj);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ffbc 	bl	800084e <voidDisableAllColumns>
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_HIGH);
			#else
			SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	5ccb      	ldrb	r3, [r1, r3]
 80008e4:	4619      	mov	r1, r3
 80008e6:	2301      	movs	r3, #1
 80008e8:	408b      	lsls	r3, r1
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	b292      	uxth	r2, r2
 80008f6:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fa3d 	bl	8000d7c <SHIFTREG_voidLatchData>
			#endif
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
 8000906:	e046      	b.n	8000996 <voidUpdateScreen_WithDelay+0xf2>
			{
				Local_col_pin_logic= !(ledmat_obj->LedMatrix_Buffer[Local_RowsCounter]>>Local_ColumnsCounter &0x01);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	7c1b      	ldrb	r3, [r3, #16]
 8000910:	461a      	mov	r2, r3
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	fa42 f303 	asr.w	r3, r2, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf0c      	ite	eq
 8000920:	2301      	moveq	r3, #1
 8000922:	2300      	movne	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	737b      	strb	r3, [r7, #13]
				#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
				GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,Local_col_pin_logic);
				#else
				if(Local_col_pin_logic == GPIO_HIGH){
 8000928:	7b7b      	ldrb	r3, [r7, #13]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d112      	bne.n	8000954 <voidUpdateScreen_WithDelay+0xb0>
					SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b21a      	sxth	r2, r3
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	440b      	add	r3, r1
 800093c:	7a1b      	ldrb	r3, [r3, #8]
 800093e:	4619      	mov	r1, r3
 8000940:	2301      	movs	r3, #1
 8000942:	408b      	lsls	r3, r1
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	b292      	uxth	r2, r2
 8000950:	801a      	strh	r2, [r3, #0]
 8000952:	e016      	b.n	8000982 <voidUpdateScreen_WithDelay+0xde>
				}
				else if(Local_col_pin_logic == GPIO_LOW){
 8000954:	7b7b      	ldrb	r3, [r7, #13]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d113      	bne.n	8000982 <voidUpdateScreen_WithDelay+0xde>
					CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b21a      	sxth	r2, r3
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	440b      	add	r3, r1
 8000968:	7a1b      	ldrb	r3, [r3, #8]
 800096a:	4619      	mov	r1, r3
 800096c:	2301      	movs	r3, #1
 800096e:	408b      	lsls	r3, r1
 8000970:	b21b      	sxth	r3, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	b21b      	sxth	r3, r3
 8000976:	4013      	ands	r3, r2
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	b292      	uxth	r2, r2
 8000980:	801a      	strh	r2, [r3, #0]
				}
				SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f9f8 	bl	8000d7c <SHIFTREG_voidLatchData>
				#endif
				Frame_delay();
 800098c:	f000 f866 	bl	8000a5c <Frame_delay>
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	3301      	adds	r3, #1
 8000994:	73bb      	strb	r3, [r7, #14]
 8000996:	7bbb      	ldrb	r3, [r7, #14]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d9b5      	bls.n	8000908 <voidUpdateScreen_WithDelay+0x64>
			}
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
			#else
			CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	5ccb      	ldrb	r3, [r1, r3]
 80009aa:	4619      	mov	r1, r3
 80009ac:	2301      	movs	r3, #1
 80009ae:	408b      	lsls	r3, r1
 80009b0:	b21b      	sxth	r3, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4013      	ands	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	b292      	uxth	r2, r2
 80009c0:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f9d8 	bl	8000d7c <SHIFTREG_voidLatchData>
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	f67f af7b 	bls.w	80008d0 <voidUpdateScreen_WithDelay+0x2c>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <voidUpdateScreen_WithDelay+0x154>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f43f af73 	beq.w	80008ca <voidUpdateScreen_WithDelay+0x26>
			#endif
		}
	}
	LEDMAT_Delay_Flag = LEDMAT_DELAY_NOT_COMPLETED;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <voidUpdateScreen_WithDelay+0x154>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	080007e1 	.word	0x080007e1
 80009f8:	20000040 	.word	0x20000040

080009fc <voidClearLEDMATBuffer>:
static void voidClearLEDMATBuffer(ledmat_t* ledmat_obj){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	memset(ledmat_obj->LedMatrix_Buffer,0,LED_MATRIX_ROW_NUM);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3310      	adds	r3, #16
 8000a08:	2208      	movs	r2, #8
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 ff34 	bl	800187a <memset>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <voidScrollLeft>:
static void voidScrollLeft(ledmat_t* ledmat_obj)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b085      	sub	sp, #20
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e00d      	b.n	8000a48 <voidScrollLeft+0x2e>
	{
		ledmat_obj->LedMatrix_Buffer[Local_RowsCounter] >>= 1;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	7c1a      	ldrb	r2, [r3, #16]
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	0852      	lsrs	r2, r2, #1
 8000a38:	b2d1      	uxtb	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	460a      	mov	r2, r1
 8000a40:	741a      	strb	r2, [r3, #16]
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	3301      	adds	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d9ee      	bls.n	8000a2c <voidScrollLeft+0x12>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <Frame_delay>:
	for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
	{
		ledmat_obj->LedMatrix_Buffer[Local_RowsCounter] <<= 1;
	}
}
static void Frame_delay(){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 u8 Local_u8DelayCounter = ZERO_INIT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	71fb      	strb	r3, [r7, #7]
 	for(Local_u8DelayCounter=ZERO_INIT;Local_u8DelayCounter<1;Local_u8DelayCounter++);
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	e002      	b.n	8000a72 <Frame_delay+0x16>
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f9      	beq.n	8000a6c <Frame_delay+0x10>
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <HLEDMAT_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void HLEDMAT_voidInit(ledmat_t* ledmat_obj)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b082      	sub	sp, #8
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
			  GPIO_voidSetPinOutputMode(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_PUSH_PULL);
			  GPIO_voidSetPinOutputSpeed(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,GPIO_OUTPUT_PIN_LOW_SPEED);
			  GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port,ledmat_obj->col[Local_ColumnsCounter].pin,ledmat_obj->col[Local_ColumnsCounter].state);
		}
#else
SHIFTREG_voidInit(ledmat_obj->ptrShiftRegCfg);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f952 	bl	8000d3c <SHIFTREG_voidInit>
#endif
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HLEDMAT_voidDisplayFrameWithDelay>:
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
			#endif
		}
}
void HLEDMAT_voidDisplayFrameWithDelay(ledmat_t* ledmat_obj,u8* Copy_pu8FrameData , u32 time_ms)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	u8 Local_RowsCounter = ZERO_INIT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]
	u8 Local_ColumnsCounter = ZERO_INIT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	75bb      	strb	r3, [r7, #22]
	gpio_logic_t Local_col_pin_logic = GPIO_HIGH;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	757b      	strb	r3, [r7, #21]
	voidDisableAllRows(ledmat_obj);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f7ff fe9d 	bl	80007f8 <voidDisableAllRows>
	memcpy(ledmat_obj->LedMatrix_Buffer,Copy_pu8FrameData,LED_MATRIX_COL_NUM);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3310      	adds	r3, #16
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ff04 	bl	80018d4 <memcpy>
	MSysTick_void_ASYNC_Delay_ms(time_ms, LEDMAT_SysTick_CallBack_Handler);
 8000acc:	494c      	ldr	r1, [pc, #304]	; (8000c00 <HLEDMAT_voidDisplayFrameWithDelay+0x160>)
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 fd8a 	bl	80015e8 <MSysTick_void_ASYNC_Delay_ms>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 8000ad4:	e087      	b.n	8000be6 <HLEDMAT_voidDisplayFrameWithDelay+0x146>
	{
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]
 8000ada:	e080      	b.n	8000bde <HLEDMAT_voidDisplayFrameWithDelay+0x13e>
		{
			voidDisableAllColumns(ledmat_obj);
 8000adc:	68f8      	ldr	r0, [r7, #12]
 8000ade:	f7ff feb6 	bl	800084e <voidDisableAllColumns>
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_HIGH);
			#else
			SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	68f9      	ldr	r1, [r7, #12]
 8000aee:	5ccb      	ldrb	r3, [r1, r3]
 8000af0:	4619      	mov	r1, r3
 8000af2:	2301      	movs	r3, #1
 8000af4:	408b      	lsls	r3, r1
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b21a      	sxth	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	b292      	uxth	r2, r2
 8000b02:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f937 	bl	8000d7c <SHIFTREG_voidLatchData>
			#endif
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	75bb      	strb	r3, [r7, #22]
 8000b12:	e046      	b.n	8000ba2 <HLEDMAT_voidDisplayFrameWithDelay+0x102>
			{
				Local_col_pin_logic= !(ledmat_obj->LedMatrix_Buffer[Local_RowsCounter]>>Local_ColumnsCounter &0x01);
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4413      	add	r3, r2
 8000b1a:	7c1b      	ldrb	r3, [r3, #16]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	7dbb      	ldrb	r3, [r7, #22]
 8000b20:	fa42 f303 	asr.w	r3, r2, r3
 8000b24:	f003 0301 	and.w	r3, r3, #1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	757b      	strb	r3, [r7, #21]
				#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
				GPIO_voidSetPinValue(ledmat_obj->col[Local_ColumnsCounter].port, ledmat_obj->col[Local_ColumnsCounter].pin,Local_col_pin_logic);
				#else
				if(Local_col_pin_logic == GPIO_HIGH){
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d112      	bne.n	8000b60 <HLEDMAT_voidDisplayFrameWithDelay+0xc0>
					SET_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	7dbb      	ldrb	r3, [r7, #22]
 8000b44:	68f9      	ldr	r1, [r7, #12]
 8000b46:	440b      	add	r3, r1
 8000b48:	7a1b      	ldrb	r3, [r3, #8]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	4313      	orrs	r3, r2
 8000b54:	b21a      	sxth	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	b292      	uxth	r2, r2
 8000b5c:	801a      	strh	r2, [r3, #0]
 8000b5e:	e016      	b.n	8000b8e <HLEDMAT_voidDisplayFrameWithDelay+0xee>
				}
				else if(Local_col_pin_logic == GPIO_LOW){
 8000b60:	7d7b      	ldrb	r3, [r7, #21]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d113      	bne.n	8000b8e <HLEDMAT_voidDisplayFrameWithDelay+0xee>
					CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->col[Local_ColumnsCounter].ShiftRegPin);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	7dbb      	ldrb	r3, [r7, #22]
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	440b      	add	r3, r1
 8000b74:	7a1b      	ldrb	r3, [r3, #8]
 8000b76:	4619      	mov	r1, r3
 8000b78:	2301      	movs	r3, #1
 8000b7a:	408b      	lsls	r3, r1
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4013      	ands	r3, r2
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	b292      	uxth	r2, r2
 8000b8c:	801a      	strh	r2, [r3, #0]
				}
				SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f8f2 	bl	8000d7c <SHIFTREG_voidLatchData>
				#endif
				Frame_delay();
 8000b98:	f7ff ff60 	bl	8000a5c <Frame_delay>
			for(Local_ColumnsCounter = ZERO_INIT; Local_ColumnsCounter<LED_MATRIX_COL_NUM; Local_ColumnsCounter++)
 8000b9c:	7dbb      	ldrb	r3, [r7, #22]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	75bb      	strb	r3, [r7, #22]
 8000ba2:	7dbb      	ldrb	r3, [r7, #22]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d9b5      	bls.n	8000b14 <HLEDMAT_voidDisplayFrameWithDelay+0x74>
			}
			#if LEDMAT_SHIFTREG_MODE == SHIFTREG_MODE_DISABLED
			GPIO_voidSetPinValue(ledmat_obj->row[Local_RowsCounter].port, ledmat_obj->row[Local_RowsCounter].pin,GPIO_LOW);
			#else
			CLR_BIT(ledmat_obj->ptrShiftRegCfg->ShiftReg_Data,ledmat_obj->row[Local_RowsCounter].ShiftRegPin);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	68f9      	ldr	r1, [r7, #12]
 8000bb4:	5ccb      	ldrb	r3, [r1, r3]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2301      	movs	r3, #1
 8000bba:	408b      	lsls	r3, r1
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	b292      	uxth	r2, r2
 8000bcc:	801a      	strh	r2, [r3, #0]
			SHIFTREG_voidLatchData(ledmat_obj->ptrShiftRegCfg);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8d2 	bl	8000d7c <SHIFTREG_voidLatchData>
		for(Local_RowsCounter = ZERO_INIT; Local_RowsCounter<LED_MATRIX_ROW_NUM; Local_RowsCounter++)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	75fb      	strb	r3, [r7, #23]
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	f67f af7b 	bls.w	8000adc <HLEDMAT_voidDisplayFrameWithDelay+0x3c>
	while(LEDMAT_Delay_Flag == LEDMAT_DELAY_NOT_COMPLETED)
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HLEDMAT_voidDisplayFrameWithDelay+0x164>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f43f af73 	beq.w	8000ad6 <HLEDMAT_voidDisplayFrameWithDelay+0x36>
			#endif
		}
	}
	LEDMAT_Delay_Flag = LEDMAT_DELAY_NOT_COMPLETED;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <HLEDMAT_voidDisplayFrameWithDelay+0x164>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	080007e1 	.word	0x080007e1
 8000c04:	20000040 	.word	0x20000040

08000c08 <HLEDMAT_voidDisplayScrollingString>:
		LEDMAT_Delay_Flag =LEDMAT_DELAY_NOT_COMPLETED;
		Copy_pu8Str++;
	}
}
void HLEDMAT_voidDisplayScrollingString(ledmat_t* ledmat_obj,u8* Copy_pu8Str,u32 Copy_u32TimeMs)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
	u8 Local_u8ColumnCounter = ZERO_INIT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	75fb      	strb	r3, [r7, #23]
	u8 Local_u8RowCounter = ZERO_INIT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	75bb      	strb	r3, [r7, #22]
	voidClearLEDMATBuffer(ledmat_obj);
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f7ff feed 	bl	80009fc <voidClearLEDMATBuffer>
	while(*Copy_pu8Str)
 8000c22:	e038      	b.n	8000c96 <HLEDMAT_voidDisplayScrollingString+0x8e>
	{
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
 8000c28:	e02f      	b.n	8000c8a <HLEDMAT_voidDisplayScrollingString+0x82>
			{
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75bb      	strb	r3, [r7, #22]
 8000c2e:	e01f      	b.n	8000c70 <HLEDMAT_voidDisplayScrollingString+0x68>
				{
						ledmat_obj->LedMatrix_Buffer[Local_u8RowCounter] |= ((Chr_font[*Copy_pu8Str-FONT_START][Local_u8RowCounter]>>Local_u8ColumnCounter&0x01)<<7);
 8000c30:	7dbb      	ldrb	r3, [r7, #22]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	7c1b      	ldrb	r3, [r3, #16]
 8000c38:	b25a      	sxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f1a3 0120 	sub.w	r1, r3, #32
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	4820      	ldr	r0, [pc, #128]	; (8000cc8 <HLEDMAT_voidDisplayScrollingString+0xc0>)
 8000c46:	00c9      	lsls	r1, r1, #3
 8000c48:	4401      	add	r1, r0
 8000c4a:	440b      	add	r3, r1
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	fa41 f303 	asr.w	r3, r1, r3
 8000c56:	01db      	lsls	r3, r3, #7
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b25a      	sxtb	r2, r3
 8000c5e:	7dbb      	ldrb	r3, [r7, #22]
 8000c60:	b2d1      	uxtb	r1, r2
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4413      	add	r3, r2
 8000c66:	460a      	mov	r2, r1
 8000c68:	741a      	strb	r2, [r3, #16]
				for (Local_u8RowCounter = ZERO_INIT;Local_u8RowCounter<LED_MATRIX_ROW_NUM;Local_u8RowCounter++)
 8000c6a:	7dbb      	ldrb	r3, [r7, #22]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75bb      	strb	r3, [r7, #22]
 8000c70:	7dbb      	ldrb	r3, [r7, #22]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9dc      	bls.n	8000c30 <HLEDMAT_voidDisplayScrollingString+0x28>
				}
				voidUpdateScreen_WithDelay(ledmat_obj,Copy_u32TimeMs);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fe13 	bl	80008a4 <voidUpdateScreen_WithDelay>
				voidScrollLeft(ledmat_obj);
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fecb 	bl	8000a1a <voidScrollLeft>
		for (Local_u8ColumnCounter = ZERO_INIT; Local_u8ColumnCounter <LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	3301      	adds	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	d9cc      	bls.n	8000c2a <HLEDMAT_voidDisplayScrollingString+0x22>
			}
		Copy_pu8Str++;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
	while(*Copy_pu8Str)
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1c2      	bne.n	8000c24 <HLEDMAT_voidDisplayScrollingString+0x1c>
	}
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
 8000ca2:	e009      	b.n	8000cb8 <HLEDMAT_voidDisplayScrollingString+0xb0>
	{
		voidScrollLeft(ledmat_obj);
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff feb8 	bl	8000a1a <voidScrollLeft>
		voidUpdateScreen_WithDelay(ledmat_obj,Copy_u32TimeMs);
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fdf9 	bl	80008a4 <voidUpdateScreen_WithDelay>
	for(Local_u8ColumnCounter =0; Local_u8ColumnCounter<LED_MATRIX_COL_NUM;Local_u8ColumnCounter++)
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	75fb      	strb	r3, [r7, #23]
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d9f2      	bls.n	8000ca4 <HLEDMAT_voidDisplayScrollingString+0x9c>
	}
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	08001910 	.word	0x08001910

08000ccc <SHIFTREG_voidPinInit>:

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/
static void SHIFTREG_voidPinInit(port_index_t port_index, pin_index_t pin_index)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	460a      	mov	r2, r1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71bb      	strb	r3, [r7, #6]
	switch (port_index) {
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d010      	beq.n	8000d04 <SHIFTREG_voidPinInit+0x38>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc13      	bgt.n	8000d0e <SHIFTREG_voidPinInit+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <SHIFTREG_voidPinInit+0x24>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d005      	beq.n	8000cfa <SHIFTREG_voidPinInit+0x2e>
		      break;
		    case GPIO_PORTC:
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
		      break;
		    default:
		      break;
 8000cee:	e00e      	b.n	8000d0e <SHIFTREG_voidPinInit+0x42>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOAEN);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 fbb0 	bl	8001458 <RCC_voidEnablePeripheralClock>
		      break;
 8000cf8:	e00a      	b.n	8000d10 <SHIFTREG_voidPinInit+0x44>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOBEN);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 fbab 	bl	8001458 <RCC_voidEnablePeripheralClock>
		      break;
 8000d02:	e005      	b.n	8000d10 <SHIFTREG_voidPinInit+0x44>
		      RCC_voidEnablePeripheralClock(RCC_AHB,RCC_AHB_GPIOCEN);
 8000d04:	2102      	movs	r1, #2
 8000d06:	2000      	movs	r0, #0
 8000d08:	f000 fba6 	bl	8001458 <RCC_voidEnablePeripheralClock>
		      break;
 8000d0c:	e000      	b.n	8000d10 <SHIFTREG_voidPinInit+0x44>
		      break;
 8000d0e:	bf00      	nop
		  }
		  GPIO_voidSetPinMode(port_index,pin_index,GPIO_OUTPUT_PIN_MODE);
 8000d10:	79b9      	ldrb	r1, [r7, #6]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	2201      	movs	r2, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f9ba 	bl	8001090 <GPIO_voidSetPinMode>
		  GPIO_voidSetPinOutputMode(port_index,pin_index,GPIO_OUTPUT_PIN_PUSH_PULL);
 8000d1c:	79b9      	ldrb	r1, [r7, #6]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2200      	movs	r2, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fa0e 	bl	8001144 <GPIO_voidSetPinOutputMode>
		  GPIO_voidSetPinOutputSpeed(port_index,pin_index,GPIO_OUTPUT_PIN_LOW_SPEED);
 8000d28:	79b9      	ldrb	r1, [r7, #6]
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fa5a 	bl	80011e8 <GPIO_voidSetPinOutputSpeed>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SHIFTREG_voidInit>:
/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/

void SHIFTREG_voidInit(SHIFTREG_t *ptrSHIFTREG)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_DataSerial_Port,ptrSHIFTREG->ShiftReg_DataSerial_Pin);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	789a      	ldrb	r2, [r3, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	78db      	ldrb	r3, [r3, #3]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f7ff ffbc 	bl	8000ccc <SHIFTREG_voidPinInit>
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4610      	mov	r0, r2
 8000d60:	f7ff ffb4 	bl	8000ccc <SHIFTREG_voidPinInit>
		SHIFTREG_voidPinInit(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	791a      	ldrb	r2, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f7ff ffac 	bl	8000ccc <SHIFTREG_voidPinInit>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SHIFTREG_voidLatchData>:
{
	ptrSHIFTREG->ShiftReg_Data = 0;

}
void SHIFTREG_voidLatchData(SHIFTREG_t *ptrSHIFTREG)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
	for(Local_u8Counter=0;Local_u8Counter<16;Local_u8Counter++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e025      	b.n	8000dda <SHIFTREG_voidLatchData+0x5e>
	{
		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_DataSerial_Port,ptrSHIFTREG->ShiftReg_DataSerial_Pin,GET_BIT(ptrSHIFTREG->ShiftReg_Data,(15-Local_u8Counter)));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7898      	ldrb	r0, [r3, #2]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	78d9      	ldrb	r1, [r3, #3]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	f1c3 030f 	rsb	r3, r3, #15
 8000da2:	fa42 f303 	asr.w	r3, r2, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	461a      	mov	r2, r3
 8000db0:	f000 fa74 	bl	800129c <GPIO_voidSetPinValue>

		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin,GPIO_HIGH);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7918      	ldrb	r0, [r3, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	795b      	ldrb	r3, [r3, #5]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f000 fa6c 	bl	800129c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_ShiftClk_Port,ptrSHIFTREG->ShiftReg_ShiftClk_Pin,GPIO_LOW);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7918      	ldrb	r0, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	795b      	ldrb	r3, [r3, #5]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	f000 fa64 	bl	800129c <GPIO_voidSetPinValue>
	for(Local_u8Counter=0;Local_u8Counter<16;Local_u8Counter++)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d9d6      	bls.n	8000d8e <SHIFTREG_voidLatchData+0x12>
	}
	GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin,GPIO_HIGH);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7998      	ldrb	r0, [r3, #6]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	79db      	ldrb	r3, [r3, #7]
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	f000 fa56 	bl	800129c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(ptrSHIFTREG->ShiftReg_StorageClk_Port,ptrSHIFTREG->ShiftReg_StorageClk_Pin,GPIO_LOW);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7998      	ldrb	r0, [r3, #6]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	79db      	ldrb	r3, [r3, #7]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 fa4e 	bl	800129c <GPIO_voidSetPinValue>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MEXTI_voidClearPendingFlag>:

void MEXTI_voidSetCallBack(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine, void (*pCallBackFunction)(void)){
    EXTI_pNotificationFunction[Copy_tInterruptLine] = pCallBackFunction;
}

void MEXTI_voidClearPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine){
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR,Copy_tInterruptLine);
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MEXTI_voidClearPendingFlag+0x2c>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	79fa      	ldrb	r2, [r7, #7]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <MEXTI_voidClearPendingFlag+0x2c>)
 8000e22:	430b      	orrs	r3, r1
 8000e24:	6153      	str	r3, [r2, #20]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <MEXTI_u8GetPendingFlag>:

u8 MEXTI_u8GetPendingFlag(MEXTI_INTERRUPT_LINE_t Copy_tInterruptLine)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	return GET_BIT(EXTI->PR,Copy_tInterruptLine);
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MEXTI_u8GetPendingFlag+0x28>)
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	b2db      	uxtb	r3, r3
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40013c00 	.word	0x40013c00

08000e64 <EXTI0_IRQHandler>:


/*********************************************EXTI0_15_IRQHandlers******************************/
void EXTI0_IRQHandler(void){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[0] != NULL){
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <EXTI0_IRQHandler+0x1c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <EXTI0_IRQHandler+0x12>
        EXTI_pNotificationFunction[0]();
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <EXTI0_IRQHandler+0x1c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI0);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f7ff ffc6 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000044 	.word	0x20000044

08000e84 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[1] != NULL){
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <EXTI1_IRQHandler+0x1c>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <EXTI1_IRQHandler+0x12>
        EXTI_pNotificationFunction[1]();
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <EXTI1_IRQHandler+0x1c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff ffb6 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000044 	.word	0x20000044

08000ea4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[2] != NULL){
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <EXTI2_IRQHandler+0x1c>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <EXTI2_IRQHandler+0x12>
        EXTI_pNotificationFunction[2]();
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <EXTI2_IRQHandler+0x1c>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI2);
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	f7ff ffa6 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000044 	.word	0x20000044

08000ec4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[3] != NULL){
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <EXTI3_IRQHandler+0x1c>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <EXTI3_IRQHandler+0x12>
        EXTI_pNotificationFunction[3]();
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <EXTI3_IRQHandler+0x1c>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI3);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f7ff ff96 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000044 	.word	0x20000044

08000ee4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    if(EXTI_pNotificationFunction[4] != NULL){
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <EXTI4_IRQHandler+0x1c>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <EXTI4_IRQHandler+0x12>
        EXTI_pNotificationFunction[4]();
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <EXTI4_IRQHandler+0x1c>)
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	4798      	blx	r3
    }
    MEXTI_voidClearPendingFlag(MEXTI_EXTI4);
 8000ef6:	2004      	movs	r0, #4
 8000ef8:	f7ff ff86 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000044 	.word	0x20000044

08000f04 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI5))
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f7ff ff95 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00a      	beq.n	8000f2a <EXTI9_5_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[5] != NULL){
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <EXTI9_5_IRQHandler+0x1e>
			EXTI_pNotificationFunction[5]();
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI5);
 8000f22:	2005      	movs	r0, #5
 8000f24:	f7ff ff70 	bl	8000e08 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[9] != NULL){
			EXTI_pNotificationFunction[9]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
	}
}
 8000f28:	e042      	b.n	8000fb0 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI6))
 8000f2a:	2006      	movs	r0, #6
 8000f2c:	f7ff ff84 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00a      	beq.n	8000f4c <EXTI9_5_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[6] != NULL){
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <EXTI9_5_IRQHandler+0x40>
			EXTI_pNotificationFunction[6]();
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI6);
 8000f44:	2006      	movs	r0, #6
 8000f46:	f7ff ff5f 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000f4a:	e031      	b.n	8000fb0 <EXTI9_5_IRQHandler+0xac>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI7))
 8000f4c:	2007      	movs	r0, #7
 8000f4e:	f7ff ff73 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00a      	beq.n	8000f6e <EXTI9_5_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[7] != NULL){
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f5a:	69db      	ldr	r3, [r3, #28]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <EXTI9_5_IRQHandler+0x62>
			EXTI_pNotificationFunction[7]();
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI7);
 8000f66:	2007      	movs	r0, #7
 8000f68:	f7ff ff4e 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000f6c:	e020      	b.n	8000fb0 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI8))
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff ff62 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00a      	beq.n	8000f90 <EXTI9_5_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[8] != NULL){
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <EXTI9_5_IRQHandler+0x84>
			EXTI_pNotificationFunction[8]();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI8);
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f7ff ff3d 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000f8e:	e00f      	b.n	8000fb0 <EXTI9_5_IRQHandler+0xac>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI9))
 8000f90:	2009      	movs	r0, #9
 8000f92:	f7ff ff51 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <EXTI9_5_IRQHandler+0xac>
		if(EXTI_pNotificationFunction[9] != NULL){
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <EXTI9_5_IRQHandler+0xa6>
			EXTI_pNotificationFunction[9]();
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <EXTI9_5_IRQHandler+0xb0>)
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI9);
 8000faa:	2009      	movs	r0, #9
 8000fac:	f7ff ff2c 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000044 	.word	0x20000044

08000fb8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	if(MEXTI_u8GetPendingFlag(MEXTI_EXTI10))
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f7ff ff3b 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00a      	beq.n	8000fde <EXTI15_10_IRQHandler+0x26>
	{
		if(EXTI_pNotificationFunction[10] != NULL){
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <EXTI15_10_IRQHandler+0x1e>
			EXTI_pNotificationFunction[10]();
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	4798      	blx	r3
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f7ff ff16 	bl	8000e08 <MEXTI_voidClearPendingFlag>
		if(EXTI_pNotificationFunction[15] != NULL){
			EXTI_pNotificationFunction[15]();
		}
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
	}
}
 8000fdc:	e053      	b.n	8001086 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI11))
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f7ff ff2a 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00a      	beq.n	8001000 <EXTI15_10_IRQHandler+0x48>
		if(EXTI_pNotificationFunction[11] != NULL){
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <EXTI15_10_IRQHandler+0x40>
			EXTI_pNotificationFunction[11]();
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI11);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f7ff ff05 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8000ffe:	e042      	b.n	8001086 <EXTI15_10_IRQHandler+0xce>
	else if(MEXTI_u8GetPendingFlag(MEXTI_EXTI12))
 8001000:	200c      	movs	r0, #12
 8001002:	f7ff ff19 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00a      	beq.n	8001022 <EXTI15_10_IRQHandler+0x6a>
		if(EXTI_pNotificationFunction[12] != NULL){
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <EXTI15_10_IRQHandler+0x62>
			EXTI_pNotificationFunction[12]();
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI12);
 800101a:	200c      	movs	r0, #12
 800101c:	f7ff fef4 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8001020:	e031      	b.n	8001086 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI13))
 8001022:	200d      	movs	r0, #13
 8001024:	f7ff ff08 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00a      	beq.n	8001044 <EXTI15_10_IRQHandler+0x8c>
		if(EXTI_pNotificationFunction[13] != NULL){
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8001030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <EXTI15_10_IRQHandler+0x84>
			EXTI_pNotificationFunction[13]();
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8001038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103a:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI13);
 800103c:	200d      	movs	r0, #13
 800103e:	f7ff fee3 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8001042:	e020      	b.n	8001086 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI14))
 8001044:	200e      	movs	r0, #14
 8001046:	f7ff fef7 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00a      	beq.n	8001066 <EXTI15_10_IRQHandler+0xae>
		if(EXTI_pNotificationFunction[14] != NULL){
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8001052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <EXTI15_10_IRQHandler+0xa6>
			EXTI_pNotificationFunction[14]();
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 800105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105c:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI14);
 800105e:	200e      	movs	r0, #14
 8001060:	f7ff fed2 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8001064:	e00f      	b.n	8001086 <EXTI15_10_IRQHandler+0xce>
	else if (MEXTI_u8GetPendingFlag(MEXTI_EXTI15))
 8001066:	200f      	movs	r0, #15
 8001068:	f7ff fee6 	bl	8000e38 <MEXTI_u8GetPendingFlag>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d009      	beq.n	8001086 <EXTI15_10_IRQHandler+0xce>
		if(EXTI_pNotificationFunction[15] != NULL){
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <EXTI15_10_IRQHandler+0xc8>
			EXTI_pNotificationFunction[15]();
 800107a:	4b04      	ldr	r3, [pc, #16]	; (800108c <EXTI15_10_IRQHandler+0xd4>)
 800107c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107e:	4798      	blx	r3
		MEXTI_voidClearPendingFlag(MEXTI_EXTI15);
 8001080:	200f      	movs	r0, #15
 8001082:	f7ff fec1 	bl	8000e08 <MEXTI_voidClearPendingFlag>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000044 	.word	0x20000044

08001090 <GPIO_voidSetPinMode>:
#include"../../../Inc/MCAL/GPIO/GPIO_config.h"
#include"../../../Inc/MCAL/GPIO/GPIO_interface.h"
#include"../../../Inc/MCAL/GPIO/GPIO_private.h"

void GPIO_voidSetPinMode(port_index_t Copy_PortIndex, pin_index_t Copy_PinIndex,
                         gpio_pin_mode_t Copy_GPIOPinMode) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
 800109e:	4613      	mov	r3, r2
 80010a0:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d02c      	beq.n	8001102 <GPIO_voidSetPinMode+0x72>
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	dc3d      	bgt.n	8001128 <GPIO_voidSetPinMode+0x98>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <GPIO_voidSetPinMode+0x26>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d013      	beq.n	80010dc <GPIO_voidSetPinMode+0x4c>
      MODIFY_REG(GPIOC_MODER,
                 GPIO_MODER_CLEAR_MASK << GPIO_MODER_PIN_BITS * Copy_PinIndex,
                 Copy_GPIOPinMode << GPIO_MODER_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 80010b4:	e038      	b.n	8001128 <GPIO_voidSetPinMode+0x98>
      MODIFY_REG(GPIOA_MODER,
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <GPIO_voidSetPinMode+0xa8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	0052      	lsls	r2, r2, #1
 80010be:	2103      	movs	r1, #3
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	4013      	ands	r3, r2
 80010c8:	7979      	ldrb	r1, [r7, #5]
 80010ca:	79ba      	ldrb	r2, [r7, #6]
 80010cc:	0052      	lsls	r2, r2, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <GPIO_voidSetPinMode+0xa8>)
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6013      	str	r3, [r2, #0]
      break;
 80010da:	e026      	b.n	800112a <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOB_MODER,
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <GPIO_voidSetPinMode+0xac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	0052      	lsls	r2, r2, #1
 80010e4:	2103      	movs	r1, #3
 80010e6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ea:	43d2      	mvns	r2, r2
 80010ec:	4013      	ands	r3, r2
 80010ee:	7979      	ldrb	r1, [r7, #5]
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <GPIO_voidSetPinMode+0xac>)
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
      break;
 8001100:	e013      	b.n	800112a <GPIO_voidSetPinMode+0x9a>
      MODIFY_REG(GPIOC_MODER,
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <GPIO_voidSetPinMode+0xb0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	79ba      	ldrb	r2, [r7, #6]
 8001108:	0052      	lsls	r2, r2, #1
 800110a:	2103      	movs	r1, #3
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	43d2      	mvns	r2, r2
 8001112:	4013      	ands	r3, r2
 8001114:	7979      	ldrb	r1, [r7, #5]
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	0052      	lsls	r2, r2, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4611      	mov	r1, r2
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <GPIO_voidSetPinMode+0xb0>)
 8001122:	430b      	orrs	r3, r1
 8001124:	6013      	str	r3, [r2, #0]
      break;
 8001126:	e000      	b.n	800112a <GPIO_voidSetPinMode+0x9a>
      break;
 8001128:	bf00      	nop
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800

08001144 <GPIO_voidSetPinOutputMode>:
void GPIO_voidSetPinOutputMode(port_index_t Copy_PortIndex,
                               pin_index_t Copy_PinIndex,
                               output_pin_mode_t Copy_OutputPinMode) {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d028      	beq.n	80011ae <GPIO_voidSetPinOutputMode+0x6a>
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc37      	bgt.n	80011d0 <GPIO_voidSetPinOutputMode+0x8c>
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <GPIO_voidSetPinOutputMode+0x26>
 8001164:	2b01      	cmp	r3, #1
 8001166:	d011      	beq.n	800118c <GPIO_voidSetPinOutputMode+0x48>
    case GPIO_PORTC:
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
                 Copy_OutputPinMode << Copy_PinIndex);
      break;
    default:
      break;
 8001168:	e032      	b.n	80011d0 <GPIO_voidSetPinOutputMode+0x8c>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <GPIO_voidSetPinOutputMode+0x9c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	43d2      	mvns	r2, r2
 8001178:	4013      	ands	r3, r2
 800117a:	7979      	ldrb	r1, [r7, #5]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4611      	mov	r1, r2
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <GPIO_voidSetPinOutputMode+0x9c>)
 8001186:	430b      	orrs	r3, r1
 8001188:	6013      	str	r3, [r2, #0]
      break;
 800118a:	e022      	b.n	80011d2 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOB_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <GPIO_voidSetPinOutputMode+0x9c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	43d2      	mvns	r2, r2
 800119a:	4013      	ands	r3, r2
 800119c:	7979      	ldrb	r1, [r7, #5]
 800119e:	79ba      	ldrb	r2, [r7, #6]
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	4611      	mov	r1, r2
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <GPIO_voidSetPinOutputMode+0x9c>)
 80011a8:	430b      	orrs	r3, r1
 80011aa:	6013      	str	r3, [r2, #0]
      break;
 80011ac:	e011      	b.n	80011d2 <GPIO_voidSetPinOutputMode+0x8e>
      MODIFY_REG(GPIOC_OTYPER, GPIO_OTYPER_CLEAR_MASK << Copy_PinIndex,
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <GPIO_voidSetPinOutputMode+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	43d2      	mvns	r2, r2
 80011bc:	4013      	ands	r3, r2
 80011be:	7979      	ldrb	r1, [r7, #5]
 80011c0:	79ba      	ldrb	r2, [r7, #6]
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <GPIO_voidSetPinOutputMode+0xa0>)
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6013      	str	r3, [r2, #0]
      break;
 80011ce:	e000      	b.n	80011d2 <GPIO_voidSetPinOutputMode+0x8e>
      break;
 80011d0:	bf00      	nop
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40020404 	.word	0x40020404
 80011e4:	40020804 	.word	0x40020804

080011e8 <GPIO_voidSetPinOutputSpeed>:
	      break;
	  }
}
void GPIO_voidSetPinOutputSpeed(port_index_t Copy_PortIndex,
                                pin_index_t Copy_PinIndex,
                                output_pin_speed_mode_t Copy_OutputPinSpeed) {
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	460b      	mov	r3, r1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	4613      	mov	r3, r2
 80011f8:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d02c      	beq.n	800125a <GPIO_voidSetPinOutputSpeed+0x72>
 8001200:	2b02      	cmp	r3, #2
 8001202:	dc3d      	bgt.n	8001280 <GPIO_voidSetPinOutputSpeed+0x98>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <GPIO_voidSetPinOutputSpeed+0x26>
 8001208:	2b01      	cmp	r3, #1
 800120a:	d013      	beq.n	8001234 <GPIO_voidSetPinOutputSpeed+0x4c>
      MODIFY_REG(GPIOC_OSPEEDR,
                 GPIO_MODER_CLEAR_MASK << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex,
                 Copy_OutputPinSpeed << GPIO_OSPEEDR_PIN_BITS * Copy_PinIndex);
      break;
    default:
      break;
 800120c:	e038      	b.n	8001280 <GPIO_voidSetPinOutputSpeed+0x98>
      MODIFY_REG(
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <GPIO_voidSetPinOutputSpeed+0xa8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	79ba      	ldrb	r2, [r7, #6]
 8001214:	0052      	lsls	r2, r2, #1
 8001216:	2103      	movs	r1, #3
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	43d2      	mvns	r2, r2
 800121e:	4013      	ands	r3, r2
 8001220:	7979      	ldrb	r1, [r7, #5]
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	0052      	lsls	r2, r2, #1
 8001226:	fa01 f202 	lsl.w	r2, r1, r2
 800122a:	4611      	mov	r1, r2
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <GPIO_voidSetPinOutputSpeed+0xa8>)
 800122e:	430b      	orrs	r3, r1
 8001230:	6013      	str	r3, [r2, #0]
      break;
 8001232:	e026      	b.n	8001282 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <GPIO_voidSetPinOutputSpeed+0xac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	79ba      	ldrb	r2, [r7, #6]
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	2103      	movs	r1, #3
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	43d2      	mvns	r2, r2
 8001244:	4013      	ands	r3, r2
 8001246:	7979      	ldrb	r1, [r7, #5]
 8001248:	79ba      	ldrb	r2, [r7, #6]
 800124a:	0052      	lsls	r2, r2, #1
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	4611      	mov	r1, r2
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <GPIO_voidSetPinOutputSpeed+0xac>)
 8001254:	430b      	orrs	r3, r1
 8001256:	6013      	str	r3, [r2, #0]
      break;
 8001258:	e013      	b.n	8001282 <GPIO_voidSetPinOutputSpeed+0x9a>
      MODIFY_REG(GPIOC_OSPEEDR,
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <GPIO_voidSetPinOutputSpeed+0xb0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	79ba      	ldrb	r2, [r7, #6]
 8001260:	0052      	lsls	r2, r2, #1
 8001262:	2103      	movs	r1, #3
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	43d2      	mvns	r2, r2
 800126a:	4013      	ands	r3, r2
 800126c:	7979      	ldrb	r1, [r7, #5]
 800126e:	79ba      	ldrb	r2, [r7, #6]
 8001270:	0052      	lsls	r2, r2, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	4611      	mov	r1, r2
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <GPIO_voidSetPinOutputSpeed+0xb0>)
 800127a:	430b      	orrs	r3, r1
 800127c:	6013      	str	r3, [r2, #0]
      break;
 800127e:	e000      	b.n	8001282 <GPIO_voidSetPinOutputSpeed+0x9a>
      break;
 8001280:	bf00      	nop
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40020008 	.word	0x40020008
 8001294:	40020408 	.word	0x40020408
 8001298:	40020808 	.word	0x40020808

0800129c <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(port_index_t Copy_PortIndex,
                          pin_index_t Copy_PinIndex,
                          gpio_logic_t Copy_GPIOLogic) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	460b      	mov	r3, r1
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
  switch (Copy_PortIndex) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d02c      	beq.n	800130e <GPIO_voidSetPinValue+0x72>
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	dc3d      	bgt.n	8001334 <GPIO_voidSetPinValue+0x98>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <GPIO_voidSetPinValue+0x26>
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d013      	beq.n	80012e8 <GPIO_voidSetPinValue+0x4c>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
      } else { /* Nothing */
      }
      break;
    default:
      break;
 80012c0:	e038      	b.n	8001334 <GPIO_voidSetPinValue+0x98>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d105      	bne.n	80012d4 <GPIO_voidSetPinValue+0x38>
        WRITE_REG(GPIOA_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2201      	movs	r2, #1
 80012cc:	409a      	lsls	r2, r3
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <GPIO_voidSetPinValue+0xb4>)
 80012d0:	601a      	str	r2, [r3, #0]
      break;
 80012d2:	e031      	b.n	8001338 <GPIO_voidSetPinValue+0x9c>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80012d4:	797b      	ldrb	r3, [r7, #5]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d12e      	bne.n	8001338 <GPIO_voidSetPinValue+0x9c>
        WRITE_REG(GPIOA_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e0:	409a      	lsls	r2, r3
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <GPIO_voidSetPinValue+0xb4>)
 80012e4:	601a      	str	r2, [r3, #0]
      break;
 80012e6:	e027      	b.n	8001338 <GPIO_voidSetPinValue+0x9c>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <GPIO_voidSetPinValue+0x5e>
        WRITE_REG(GPIOB_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2201      	movs	r2, #1
 80012f2:	409a      	lsls	r2, r3
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <GPIO_voidSetPinValue+0xb8>)
 80012f6:	601a      	str	r2, [r3, #0]
      break;
 80012f8:	e020      	b.n	800133c <GPIO_voidSetPinValue+0xa0>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 80012fa:	797b      	ldrb	r3, [r7, #5]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11d      	bne.n	800133c <GPIO_voidSetPinValue+0xa0>
        WRITE_REG(GPIOB_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001306:	409a      	lsls	r2, r3
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <GPIO_voidSetPinValue+0xb8>)
 800130a:	601a      	str	r2, [r3, #0]
      break;
 800130c:	e016      	b.n	800133c <GPIO_voidSetPinValue+0xa0>
      if (Copy_GPIOLogic == GPIO_HIGH) {
 800130e:	797b      	ldrb	r3, [r7, #5]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d105      	bne.n	8001320 <GPIO_voidSetPinValue+0x84>
        WRITE_REG(GPIOC_BSRR, GPIO_SET_BIT_POS << Copy_PinIndex);
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <GPIO_voidSetPinValue+0xbc>)
 800131c:	601a      	str	r2, [r3, #0]
      break;
 800131e:	e00f      	b.n	8001340 <GPIO_voidSetPinValue+0xa4>
      } else if (Copy_GPIOLogic == GPIO_LOW) {
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <GPIO_voidSetPinValue+0xa4>
        WRITE_REG(GPIOC_BSRR, GPIO_RESET_BIT_POS << Copy_PinIndex);
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800132c:	409a      	lsls	r2, r3
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <GPIO_voidSetPinValue+0xbc>)
 8001330:	601a      	str	r2, [r3, #0]
      break;
 8001332:	e005      	b.n	8001340 <GPIO_voidSetPinValue+0xa4>
      break;
 8001334:	bf00      	nop
 8001336:	e004      	b.n	8001342 <GPIO_voidSetPinValue+0xa6>
      break;
 8001338:	bf00      	nop
 800133a:	e002      	b.n	8001342 <GPIO_voidSetPinValue+0xa6>
      break;
 800133c:	bf00      	nop
 800133e:	e000      	b.n	8001342 <GPIO_voidSetPinValue+0xa6>
      break;
 8001340:	bf00      	nop
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40020018 	.word	0x40020018
 8001354:	40020418 	.word	0x40020418
 8001358:	40020818 	.word	0x40020818

0800135c <MNVIC_voidInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void MNVIC_voidInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	MSCB_voidSetPriorityGrouping();
 8001360:	f000 f8ba 	bl	80014d8 <MSCB_voidSetPriorityGrouping>
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <RCC_void_HSI_Init>:
static void RCC_void_APB2Prescaler_Init(void);
/************************************************/

/******* Local Functions Implementation ********/
static void RCC_void_HSI_Init(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    SET_BIT(RCC_CR,RCC_CR_HSION_Pos);  // Enable HSI
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_HSEON_Pos); // Disable HSE  
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CR,RCC_CR_PLLON_Pos); // Disable PLL
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	6013      	str	r3, [r2, #0]
    // Polling (Busy Wait)
    while (GET_BIT(RCC_CR,RCC_CR_HSIRDY_Pos) == 0);
 8001390:	bf00      	nop
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <RCC_void_HSI_Init+0x58>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f9      	beq.n	8001392 <RCC_void_HSI_Init+0x2a>
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <RCC_void_HSI_Init+0x5c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <RCC_void_HSI_Init+0x5c>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]
    CLR_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos);    
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <RCC_void_HSI_Init+0x5c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <RCC_void_HSI_Init+0x5c>)
 80013b0:	f023 0302 	bic.w	r3, r3, #2
 80013b4:	6013      	str	r3, [r2, #0]
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40023808 	.word	0x40023808

080013c8 <RCC_void_AHB1Prescaler_Init>:
    SET_BIT(RCC_CFGR,RCC_CFGR_SW0_Pos);
    SET_BIT(RCC_CFGR,RCC_CFGR_SW1_Pos); 

}
static void RCC_void_AHB1Prescaler_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
    #if   RCC_AHB_PRESCALER == RCC_AHB_DIV_1
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <RCC_void_AHB1Prescaler_Init+0x24>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <RCC_void_AHB1Prescaler_Init+0x24>)
 80013d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013d6:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_1;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <RCC_void_AHB1Prescaler_Init+0x24>)
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <RCC_void_AHB1Prescaler_Init+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_AHB_DIV_256;
    #elif RCC_AHB_PRESCALER == RCC_AHB_DIV_512
        RCC_CFGR &= ~(RCC_AHB_PRESCALER_MASK);
        RCC_CFGR |= RCC_AHB_DIV_512;
    #endif
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023808 	.word	0x40023808

080013f0 <RCC_void_APB1Prescaler_Init>:
static void RCC_void_APB1Prescaler_Init(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
    #if RCC_APB1_PRESCALER == RCC_APB1_DIV_1
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <RCC_void_APB1Prescaler_Init+0x24>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <RCC_void_APB1Prescaler_Init+0x24>)
 80013fa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013fe:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_1;
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <RCC_void_APB1Prescaler_Init+0x24>)
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <RCC_void_APB1Prescaler_Init+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB1_DIV_8;
    #elif RCC_APB1_PRESCALER == RCC_APB1_DIV_16
        RCC_CFGR &= ~(RCC_APB1_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB1_DIV_16;
    #endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023808 	.word	0x40023808

08001418 <RCC_void_APB2Prescaler_Init>:
static void RCC_void_APB2Prescaler_Init(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    #if (RCC_APB2_PRESCALER == RCC_APB2_DIV_1)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <RCC_void_APB2Prescaler_Init+0x24>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <RCC_void_APB2Prescaler_Init+0x24>)
 8001422:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001426:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_1;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <RCC_void_APB2Prescaler_Init+0x24>)
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <RCC_void_APB2Prescaler_Init+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6013      	str	r3, [r2, #0]
        RCC_CFGR |= RCC_APB2_DIV_8;
    #elif (RCC_APB2_PRESCALER == RCC_APB2_DIV_16)
        RCC_CFGR &= ~(RCC_APB2_PRESCALER_MASK);
        RCC_CFGR |= RCC_APB2_DIV_16;
    #endif
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023808 	.word	0x40023808

08001440 <RCC_voidInit>:
/**********************************************  */
void RCC_voidInit(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    #if RCC_CLOCK_SOURCE == RCC_CLK_HSI
        RCC_void_HSI_Init();        
 8001444:	f7ff ff90 	bl	8001368 <RCC_void_HSI_Init>
    #elif RCC_CLOCK_SOURCE == RCC_CLK_PLL
        RCC_void_PLL_Init();
    #else
        #error "RCC_ClOCK_SOURCE_Configuration_Error"
    #endif    
    RCC_void_AHB1Prescaler_Init();
 8001448:	f7ff ffbe 	bl	80013c8 <RCC_void_AHB1Prescaler_Init>
    RCC_void_APB1Prescaler_Init();
 800144c:	f7ff ffd0 	bl	80013f0 <RCC_void_APB1Prescaler_Init>
    RCC_void_APB2Prescaler_Init();   
 8001450:	f7ff ffe2 	bl	8001418 <RCC_void_APB2Prescaler_Init>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <RCC_voidEnablePeripheralClock>:
    else
    {
        // Error
    }
}
void RCC_voidEnablePeripheralClock (u8 Copy_u8BusName, u8 Copy_u8PeripheralName){
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	460a      	mov	r2, r1
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	4613      	mov	r3, r2
 8001466:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusName)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d01c      	beq.n	80014a8 <RCC_voidEnablePeripheralClock+0x50>
 800146e:	2b02      	cmp	r3, #2
 8001470:	dc25      	bgt.n	80014be <RCC_voidEnablePeripheralClock+0x66>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <RCC_voidEnablePeripheralClock+0x24>
 8001476:	2b01      	cmp	r3, #1
 8001478:	d00b      	beq.n	8001492 <RCC_voidEnablePeripheralClock+0x3a>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
        /* code */
        break;  
    default:
        // Error
        break;
 800147a:	e020      	b.n	80014be <RCC_voidEnablePeripheralClock+0x66>
        SET_BIT(RCC_AHB1ENR,Copy_u8PeripheralName);
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <RCC_voidEnablePeripheralClock+0x74>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	79ba      	ldrb	r2, [r7, #6]
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f202 	lsl.w	r2, r1, r2
 8001488:	4611      	mov	r1, r2
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <RCC_voidEnablePeripheralClock+0x74>)
 800148c:	430b      	orrs	r3, r1
 800148e:	6013      	str	r3, [r2, #0]
        break;
 8001490:	e016      	b.n	80014c0 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB1ENR,Copy_u8PeripheralName);
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <RCC_voidEnablePeripheralClock+0x78>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	79ba      	ldrb	r2, [r7, #6]
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	4611      	mov	r1, r2
 80014a0:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <RCC_voidEnablePeripheralClock+0x78>)
 80014a2:	430b      	orrs	r3, r1
 80014a4:	6013      	str	r3, [r2, #0]
        break;
 80014a6:	e00b      	b.n	80014c0 <RCC_voidEnablePeripheralClock+0x68>
        SET_BIT(RCC_APB2ENR,Copy_u8PeripheralName);
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <RCC_voidEnablePeripheralClock+0x7c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	79ba      	ldrb	r2, [r7, #6]
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <RCC_voidEnablePeripheralClock+0x7c>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
        break;  
 80014bc:	e000      	b.n	80014c0 <RCC_voidEnablePeripheralClock+0x68>
        break;
 80014be:	bf00      	nop
    }
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40023830 	.word	0x40023830
 80014d0:	40023840 	.word	0x40023840
 80014d4:	40023844 	.word	0x40023844

080014d8 <MSCB_voidSetPriorityGrouping>:
 *
 * @note Changing the priority grouping affects the allocation of priority levels for interrupts.
 *       It is recommended to set the priority grouping early in the system initialization.
 */
void MSCB_voidSetPriorityGrouping()
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
	u32 Register_Value = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
	u32 PriorityGroupTemp= (u32)SCB_PRIORITY_GROUP & (u32)0x07;
 80014e2:	2305      	movs	r3, #5
 80014e4:	603b      	str	r3, [r7, #0]
	Register_Value = SCB->AIRCR ;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MSCB_voidSetPriorityGrouping+0x44>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	607b      	str	r3, [r7, #4]
	Register_Value &= ~(SCB_AIRCR_PRIGROUP_Msk | SCB_AIRCR_VECTKEY_Msk);
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f2:	4013      	ands	r3, r2
 80014f4:	607b      	str	r3, [r7, #4]
	Register_Value |= ((u32)0x5FA << SCB_AIRCR_VECTKEY_POS) | (PriorityGroupTemp << SCB_AIRCR_PRIGROUP_POS);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	021a      	lsls	r2, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	607b      	str	r3, [r7, #4]
	SCB->AIRCR = Register_Value ;
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <MSCB_voidSetPriorityGrouping+0x44>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60d3      	str	r3, [r2, #12]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <SPI1_IRQHandler>:
	return Local_u8ErrorState;
}


void SPI1_IRQHandler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
		{
			SPI1_RX_INT_Callback();
		}
	}
#endif
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
		{
			SPI2_RX_INT_Callback();
		}
	}
#endif
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
		{
			SPI3_RX_INT_Callback();
		}
	}
#endif
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <MSysTick_voidInit>:
volatile PtrFunction SysTick_CallBack = NULL;
volatile u8 SysTick_Mode = SysTick_SingleInterval_Mode;
/********************/

void MSysTick_voidInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
		/* Select The Processor Clock */
#if (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_1)
		SET_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
#elif (SYSTICK_CLOCK_SOURCE == SYSTICK_AHB_DIV_8)
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_CLKSOURCE_Pos);
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MSysTick_voidInit+0x34>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <MSysTick_voidInit+0x34>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6013      	str	r3, [r2, #0]
		#if(SYSTICK_INT_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick IRQ */
		SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
    #elif(SYSTICK_INT_CTRL == SYSTICK_DISABLE)
    /*Disable SysTick IRQ */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MSysTick_voidInit+0x34>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <MSysTick_voidInit+0x34>)
 8001562:	f023 0302 	bic.w	r3, r3, #2
 8001566:	6013      	str	r3, [r2, #0]
    #endif
    #if(SYSTICK_CTRL == SYSTICK_ENABLE)
    /*Enable SysTick Counter*/
    SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <MSysTick_voidInit+0x34>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <MSysTick_voidInit+0x34>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]
    #elif(SYSTICK_CTRL == SYSTICK_DISABLE)
    /* Disable SysTick Counter */
		CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
    #endif
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <MSysTick_voidDeInit>:
void MSysTick_voidDeInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	/* Disable SysTick Counter */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]
	/* Reset The SysTick Reload Register */
	SysTick->LOAD = 0;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
	/*Disable SysTick IRQ */
	CLR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <MSysTick_voidDeInit+0x34>)
 80015a6:	f023 0302 	bic.w	r3, r3, #2
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <SysTick_Handler>:
{
	SysTick->LOAD = Copy_u32Ticks;
	SysTick->VAL = 0;
}
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	if (SysTick_Mode == SysTick_SingleInterval_Mode)
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <SysTick_Handler+0x24>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <SysTick_Handler+0x12>
	{
		MSysTick_voidDeInit();
 80015ca:	f7ff ffdb 	bl	8001584 <MSysTick_voidDeInit>
	}
	if(SysTick_CallBack)
 80015ce:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Handler+0x28>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <SysTick_Handler+0x20>
	{
		SysTick_CallBack();
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <SysTick_Handler+0x28>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4798      	blx	r3
	}
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000088 	.word	0x20000088
 80015e4:	20000084 	.word	0x20000084

080015e8 <MSysTick_void_ASYNC_Delay_ms>:
	SysTick->LOAD = 0;
	/* Reset The SysTick Counter Value*/
	SysTick->VAL = 0;
}
void MSysTick_void_ASYNC_Delay_ms(u32 time_ms,PtrFunction CallBack_Ptr)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
	u32 Local_ticks = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
	if (CallBack_Ptr != NULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d02e      	beq.n	800165a <MSysTick_void_ASYNC_Delay_ms+0x72>
		{
			Local_ticks = (u32)(((SYSTICK_AHB_CLK/SYSTICK_CLOCK_SOURCE)/1000.0)*time_ms);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff f855 	bl	80006ac <__aeabi_ui2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MSysTick_void_ASYNC_Delay_ms+0x7c>)
 8001608:	f7fe fde4 	bl	80001d4 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff f8c4 	bl	80007a0 <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	60fb      	str	r3, [r7, #12]
			if(Local_ticks>SysTick_LOAD_RELOAD_Msk)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001622:	d302      	bcc.n	800162a <MSysTick_void_ASYNC_Delay_ms+0x42>
			{
				Local_ticks = SysTick_LOAD_RELOAD_Msk;
 8001624:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001628:	60fb      	str	r3, [r7, #12]
			}
		  /* Set Reload Register to SysTick Ticks */
		  	SysTick->LOAD = Local_ticks;
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6053      	str	r3, [r2, #4]
		  	SysTick->VAL = 0;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
			/* Copy The User CallBack to Local ptrFunction */
			SysTick_CallBack = CallBack_Ptr;
 8001636:	4a0d      	ldr	r2, [pc, #52]	; (800166c <MSysTick_void_ASYNC_Delay_ms+0x84>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6013      	str	r3, [r2, #0]
			/* Set The SysTick Timer to Single Interval Mode */
			SysTick_Mode = SysTick_SingleInterval_Mode;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MSysTick_void_ASYNC_Delay_ms+0x88>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
			/*Enable SysTick IRQ */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Pos);
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6013      	str	r3, [r2, #0]
			/* Enable SysTick Counter */
			SET_BIT(SysTick->CTRL,SysTick_CTRL_ENABLE_Pos);
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <MSysTick_void_ASYNC_Delay_ms+0x80>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6013      	str	r3, [r2, #0]
		}
		else { /* Nothing */}
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	409f4000 	.word	0x409f4000
 8001668:	e000e010 	.word	0xe000e010
 800166c:	20000084 	.word	0x20000084
 8001670:	20000088 	.word	0x20000088

08001674 <Za3bola_Animations_Init>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void Za3bola_Animations_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	HLEDMAT_voidInit(&ledmat_obj);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <Za3bola_Animations_Init+0x10>)
 800167a:	f7ff fa04 	bl	8000a86 <HLEDMAT_voidInit>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <Za3bola_WelcomeMessage>:
void Za3bola_WelcomeMessage(void){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	HLEDMAT_voidDisplayScrollingString(&ledmat_obj,"ZA3BOLA",180);
 800168c:	22b4      	movs	r2, #180	; 0xb4
 800168e:	4903      	ldr	r1, [pc, #12]	; (800169c <Za3bola_WelcomeMessage+0x14>)
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <Za3bola_WelcomeMessage+0x18>)
 8001692:	f7ff fab9 	bl	8000c08 <HLEDMAT_voidDisplayScrollingString>
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	08001908 	.word	0x08001908
 80016a0:	20000000 	.word	0x20000000

080016a4 <Za3bola_Animation1>:
void Za3bola_Animation1(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	u8 Local_AnimationCounter = ZERO_INIT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<=6;Local_AnimationCounter++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e016      	b.n	80016e2 <Za3bola_Animation1+0x3e>
	{
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation1_Frame1,200);
 80016b4:	22c8      	movs	r2, #200	; 0xc8
 80016b6:	490f      	ldr	r1, [pc, #60]	; (80016f4 <Za3bola_Animation1+0x50>)
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <Za3bola_Animation1+0x54>)
 80016ba:	f7ff f9f1 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation1_Frame2,200);
 80016be:	22c8      	movs	r2, #200	; 0xc8
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <Za3bola_Animation1+0x58>)
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <Za3bola_Animation1+0x54>)
 80016c4:	f7ff f9ec 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation1_Frame3,200);
 80016c8:	22c8      	movs	r2, #200	; 0xc8
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <Za3bola_Animation1+0x5c>)
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <Za3bola_Animation1+0x54>)
 80016ce:	f7ff f9e7 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation1_Frame2,200);
 80016d2:	22c8      	movs	r2, #200	; 0xc8
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <Za3bola_Animation1+0x58>)
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <Za3bola_Animation1+0x54>)
 80016d8:	f7ff f9e2 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<=6;Local_AnimationCounter++)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	3301      	adds	r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d9e5      	bls.n	80016b4 <Za3bola_Animation1+0x10>
	}
}
 80016e8:	bf00      	nop
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08001c08 	.word	0x08001c08
 80016f8:	20000000 	.word	0x20000000
 80016fc:	08001c10 	.word	0x08001c10
 8001700:	08001c18 	.word	0x08001c18

08001704 <Za3bola_Animation2>:
void Za3bola_Animation2(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	u8 Local_AnimationCounter = ZERO_INIT;
 800170a:	2300      	movs	r3, #0
 800170c:	71fb      	strb	r3, [r7, #7]
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<=6;Local_AnimationCounter++)
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e00e      	b.n	8001732 <Za3bola_Animation2+0x2e>
	{
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation2_Frame1,400);
 8001714:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001718:	490a      	ldr	r1, [pc, #40]	; (8001744 <Za3bola_Animation2+0x40>)
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <Za3bola_Animation2+0x44>)
 800171c:	f7ff f9c0 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation2_Frame2,400);
 8001720:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001724:	4909      	ldr	r1, [pc, #36]	; (800174c <Za3bola_Animation2+0x48>)
 8001726:	4808      	ldr	r0, [pc, #32]	; (8001748 <Za3bola_Animation2+0x44>)
 8001728:	f7ff f9ba 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<=6;Local_AnimationCounter++)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	3301      	adds	r3, #1
 8001730:	71fb      	strb	r3, [r7, #7]
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b06      	cmp	r3, #6
 8001736:	d9ed      	bls.n	8001714 <Za3bola_Animation2+0x10>
	}
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	08001c20 	.word	0x08001c20
 8001748:	20000000 	.word	0x20000000
 800174c:	08001c28 	.word	0x08001c28

08001750 <Za3bola_Animation3>:

void Za3bola_Animation3(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	u8 Local_AnimationCounter = ZERO_INIT;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<3;Local_AnimationCounter++)
 800175a:	2300      	movs	r3, #0
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e034      	b.n	80017ca <Za3bola_Animation3+0x7a>
	{
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame1,200);
 8001760:	22c8      	movs	r2, #200	; 0xc8
 8001762:	491e      	ldr	r1, [pc, #120]	; (80017dc <Za3bola_Animation3+0x8c>)
 8001764:	481e      	ldr	r0, [pc, #120]	; (80017e0 <Za3bola_Animation3+0x90>)
 8001766:	f7ff f99b 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame2,200);
 800176a:	22c8      	movs	r2, #200	; 0xc8
 800176c:	491d      	ldr	r1, [pc, #116]	; (80017e4 <Za3bola_Animation3+0x94>)
 800176e:	481c      	ldr	r0, [pc, #112]	; (80017e0 <Za3bola_Animation3+0x90>)
 8001770:	f7ff f996 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame3,200);
 8001774:	22c8      	movs	r2, #200	; 0xc8
 8001776:	491c      	ldr	r1, [pc, #112]	; (80017e8 <Za3bola_Animation3+0x98>)
 8001778:	4819      	ldr	r0, [pc, #100]	; (80017e0 <Za3bola_Animation3+0x90>)
 800177a:	f7ff f991 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame4,200);
 800177e:	22c8      	movs	r2, #200	; 0xc8
 8001780:	491a      	ldr	r1, [pc, #104]	; (80017ec <Za3bola_Animation3+0x9c>)
 8001782:	4817      	ldr	r0, [pc, #92]	; (80017e0 <Za3bola_Animation3+0x90>)
 8001784:	f7ff f98c 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame5,200);
 8001788:	22c8      	movs	r2, #200	; 0xc8
 800178a:	4919      	ldr	r1, [pc, #100]	; (80017f0 <Za3bola_Animation3+0xa0>)
 800178c:	4814      	ldr	r0, [pc, #80]	; (80017e0 <Za3bola_Animation3+0x90>)
 800178e:	f7ff f987 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame6,200);
 8001792:	22c8      	movs	r2, #200	; 0xc8
 8001794:	4917      	ldr	r1, [pc, #92]	; (80017f4 <Za3bola_Animation3+0xa4>)
 8001796:	4812      	ldr	r0, [pc, #72]	; (80017e0 <Za3bola_Animation3+0x90>)
 8001798:	f7ff f982 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame5,200);
 800179c:	22c8      	movs	r2, #200	; 0xc8
 800179e:	4914      	ldr	r1, [pc, #80]	; (80017f0 <Za3bola_Animation3+0xa0>)
 80017a0:	480f      	ldr	r0, [pc, #60]	; (80017e0 <Za3bola_Animation3+0x90>)
 80017a2:	f7ff f97d 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame4,200);
 80017a6:	22c8      	movs	r2, #200	; 0xc8
 80017a8:	4910      	ldr	r1, [pc, #64]	; (80017ec <Za3bola_Animation3+0x9c>)
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <Za3bola_Animation3+0x90>)
 80017ac:	f7ff f978 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame3,200);
 80017b0:	22c8      	movs	r2, #200	; 0xc8
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <Za3bola_Animation3+0x98>)
 80017b4:	480a      	ldr	r0, [pc, #40]	; (80017e0 <Za3bola_Animation3+0x90>)
 80017b6:	f7ff f973 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
		HLEDMAT_voidDisplayFrameWithDelay(&ledmat_obj, Za3bola_Animation3_Frame2,200);
 80017ba:	22c8      	movs	r2, #200	; 0xc8
 80017bc:	4909      	ldr	r1, [pc, #36]	; (80017e4 <Za3bola_Animation3+0x94>)
 80017be:	4808      	ldr	r0, [pc, #32]	; (80017e0 <Za3bola_Animation3+0x90>)
 80017c0:	f7ff f96e 	bl	8000aa0 <HLEDMAT_voidDisplayFrameWithDelay>
	for(Local_AnimationCounter = ZERO_INIT;Local_AnimationCounter<3;Local_AnimationCounter++)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	3301      	adds	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d9c7      	bls.n	8001760 <Za3bola_Animation3+0x10>
	}
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08001c30 	.word	0x08001c30
 80017e0:	20000000 	.word	0x20000000
 80017e4:	08001c38 	.word	0x08001c38
 80017e8:	08001c40 	.word	0x08001c40
 80017ec:	08001c48 	.word	0x08001c48
 80017f0:	08001c50 	.word	0x08001c50
 80017f4:	08001c58 	.word	0x08001c58

080017f8 <main>:

// ----------------------------------------------------------------------------


int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	Za3bola_Animations_Init();
 80017fc:	f7ff ff3a 	bl	8001674 <Za3bola_Animations_Init>
	Za3bola_WelcomeMessage();
 8001800:	f7ff ff42 	bl	8001688 <Za3bola_WelcomeMessage>
    /* Loop forever */
	while(1){
		Za3bola_Animation1();
 8001804:	f7ff ff4e 	bl	80016a4 <Za3bola_Animation1>
		Za3bola_Animation2();
 8001808:	f7ff ff7c 	bl	8001704 <Za3bola_Animation2>
		Za3bola_Animation3();
 800180c:	f7ff ffa0 	bl	8001750 <Za3bola_Animation3>
		Za3bola_Animation1();
 8001810:	e7f8      	b.n	8001804 <main+0xc>

08001812 <SystemInit>:

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/
void SystemInit(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8001816:	f7ff fe13 	bl	8001440 <RCC_voidInit>
	MSysTick_voidInit();
 800181a:	f7ff fe97 	bl	800154c <MSysTick_voidInit>
	MNVIC_voidInit();
 800181e:	f7ff fd9d 	bl	800135c <MNVIC_voidInit>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800182c:	f7ff fff1 	bl	8001812 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001856:	f000 f819 	bl	800188c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff ffcd 	bl	80017f8 <main>

0800185e <LoopForever>:

LoopForever:
  b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   r0, =_estack
 8001860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 800186c:	08001c68 	.word	0x08001c68
  ldr r2, =_sbss
 8001870:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001874:	2000008c 	.word	0x2000008c

08001878 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>

0800187a <memset>:
 800187a:	4402      	add	r2, r0
 800187c:	4603      	mov	r3, r0
 800187e:	4293      	cmp	r3, r2
 8001880:	d100      	bne.n	8001884 <memset+0xa>
 8001882:	4770      	bx	lr
 8001884:	f803 1b01 	strb.w	r1, [r3], #1
 8001888:	e7f9      	b.n	800187e <memset+0x4>
	...

0800188c <__libc_init_array>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	4d0d      	ldr	r5, [pc, #52]	; (80018c4 <__libc_init_array+0x38>)
 8001890:	4c0d      	ldr	r4, [pc, #52]	; (80018c8 <__libc_init_array+0x3c>)
 8001892:	1b64      	subs	r4, r4, r5
 8001894:	10a4      	asrs	r4, r4, #2
 8001896:	2600      	movs	r6, #0
 8001898:	42a6      	cmp	r6, r4
 800189a:	d109      	bne.n	80018b0 <__libc_init_array+0x24>
 800189c:	4d0b      	ldr	r5, [pc, #44]	; (80018cc <__libc_init_array+0x40>)
 800189e:	4c0c      	ldr	r4, [pc, #48]	; (80018d0 <__libc_init_array+0x44>)
 80018a0:	f000 f826 	bl	80018f0 <_init>
 80018a4:	1b64      	subs	r4, r4, r5
 80018a6:	10a4      	asrs	r4, r4, #2
 80018a8:	2600      	movs	r6, #0
 80018aa:	42a6      	cmp	r6, r4
 80018ac:	d105      	bne.n	80018ba <__libc_init_array+0x2e>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b4:	4798      	blx	r3
 80018b6:	3601      	adds	r6, #1
 80018b8:	e7ee      	b.n	8001898 <__libc_init_array+0xc>
 80018ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80018be:	4798      	blx	r3
 80018c0:	3601      	adds	r6, #1
 80018c2:	e7f2      	b.n	80018aa <__libc_init_array+0x1e>
 80018c4:	08001c60 	.word	0x08001c60
 80018c8:	08001c60 	.word	0x08001c60
 80018cc:	08001c60 	.word	0x08001c60
 80018d0:	08001c64 	.word	0x08001c64

080018d4 <memcpy>:
 80018d4:	440a      	add	r2, r1
 80018d6:	4291      	cmp	r1, r2
 80018d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80018dc:	d100      	bne.n	80018e0 <memcpy+0xc>
 80018de:	4770      	bx	lr
 80018e0:	b510      	push	{r4, lr}
 80018e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018ea:	4291      	cmp	r1, r2
 80018ec:	d1f9      	bne.n	80018e2 <memcpy+0xe>
 80018ee:	bd10      	pop	{r4, pc}

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr
